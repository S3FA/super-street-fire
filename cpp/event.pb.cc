// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace guiprotocol {

namespace {

const ::google::protobuf::Descriptor* GameEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEvent_FireEmitter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEvent_FireEmitter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameEvent_EventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameEvent_RoundResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameEvent_MatchResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameEvent_FireEmitterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameEvent_FlameEmitterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameEvent_AttackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameEvent_RingmasterActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameEvent_RoundBeginCountdownTime_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_2eproto() {
  protobuf_AddDesc_event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event.proto");
  GOOGLE_CHECK(file != NULL);
  GameEvent_descriptor_ = file->message_type(0);
  static const int GameEvent_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, emitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, oldgamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, newgamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, matchresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, attacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, oldhealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, newhealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, roundnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, roundbegintimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, roundresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, timedout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, timeinsecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, roundresults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, player1health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, player2health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, roundinplaytimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, player1unlimitedmoveson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, player2unlimitedmoveson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, ringmasteractiontype_),
  };
  GameEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEvent_descriptor_,
      GameEvent::default_instance_,
      GameEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEvent));
  GameEvent_FireEmitter_descriptor_ = GameEvent_descriptor_->nested_type(0);
  static const int GameEvent_FireEmitter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_FireEmitter, emitterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_FireEmitter, emittertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_FireEmitter, intensityringmaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_FireEmitter, intensityplayer1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_FireEmitter, intensityplayer2_),
  };
  GameEvent_FireEmitter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEvent_FireEmitter_descriptor_,
      GameEvent_FireEmitter::default_instance_,
      GameEvent_FireEmitter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_FireEmitter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEvent_FireEmitter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEvent_FireEmitter));
  GameEvent_EventType_descriptor_ = GameEvent_descriptor_->enum_type(0);
  GameEvent_RoundResult_descriptor_ = GameEvent_descriptor_->enum_type(1);
  GameEvent_MatchResult_descriptor_ = GameEvent_descriptor_->enum_type(2);
  GameEvent_FireEmitterType_descriptor_ = GameEvent_descriptor_->enum_type(3);
  GameEvent_FlameEmitterType_descriptor_ = GameEvent_descriptor_->enum_type(4);
  GameEvent_AttackType_descriptor_ = GameEvent_descriptor_->enum_type(5);
  GameEvent_RingmasterActionType_descriptor_ = GameEvent_descriptor_->enum_type(6);
  GameEvent_RoundBeginCountdownTime_descriptor_ = GameEvent_descriptor_->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEvent_descriptor_, &GameEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEvent_FireEmitter_descriptor_, &GameEvent_FireEmitter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_2eproto() {
  delete GameEvent::default_instance_;
  delete GameEvent_reflection_;
  delete GameEvent_FireEmitter::default_instance_;
  delete GameEvent_FireEmitter_reflection_;
}

void protobuf_AddDesc_event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::guiprotocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013event.proto\022\013guiprotocol\032\014common.proto"
    "\"\312\024\n\tGameEvent\022.\n\004type\030\001 \002(\0162 .guiprotoc"
    "ol.GameEvent.EventType\0223\n\007emitter\030\002 \001(\0132"
    "\".guiprotocol.GameEvent.FireEmitter\022,\n\014o"
    "ldGameState\030\003 \001(\0162\026.guiprotocol.GameStat"
    "e\022,\n\014newGameState\030\004 \001(\0162\026.guiprotocol.Ga"
    "meState\0227\n\013matchResult\030\005 \001(\0162\".guiprotoc"
    "ol.GameEvent.MatchResult\022#\n\006player\030\006 \001(\016"
    "2\023.guiprotocol.Player\0225\n\nattackType\030\007 \001("
    "\0162!.guiprotocol.GameEvent.AttackType\022\021\n\t"
    "oldHealth\030\t \001(\002\022\021\n\tnewHealth\030\n \001(\002\022\023\n\013ro"
    "undNumber\030\013 \001(\005\022G\n\017roundBeginTimer\030\014 \001(\016"
    "2..guiprotocol.GameEvent.RoundBeginCount"
    "downTime\0227\n\013roundResult\030\r \001(\0162\".guiproto"
    "col.GameEvent.RoundResult\022\020\n\010timedOut\030\016 "
    "\001(\010\022\022\n\ntimeInSecs\030\017 \001(\005\022)\n\tgameState\030\020 \001"
    "(\0162\026.guiprotocol.GameState\0228\n\014roundResul"
    "ts\030\021 \003(\0162\".guiprotocol.GameEvent.RoundRe"
    "sult\022\025\n\rplayer1Health\030\022 \001(\002\022\025\n\rplayer2He"
    "alth\030\023 \001(\002\022\030\n\020roundInPlayTimer\030\024 \001(\005\022\037\n\027"
    "player1UnlimitedMovesOn\030\026 \001(\010\022\037\n\027player2"
    "UnlimitedMovesOn\030\027 \001(\010\022I\n\024ringmasterActi"
    "onType\030\030 \001(\0162+.guiprotocol.GameEvent.Rin"
    "gmasterActionType\032\261\001\n\013FireEmitter\022\024\n\014emi"
    "tterIndex\030\001 \002(\005\022;\n\013emitterType\030\002 \002(\0162&.g"
    "uiprotocol.GameEvent.FireEmitterType\022\033\n\023"
    "intensityRingmaster\030\003 \002(\002\022\030\n\020intensityPl"
    "ayer1\030\004 \002(\002\022\030\n\020intensityPlayer2\030\005 \002(\002\"\313\002"
    "\n\tEventType\022\025\n\021GAME_INFO_REFRESH\020\000\022\030\n\024FI"
    "RE_EMITTER_CHANGED\020\001\022\026\n\022GAME_STATE_CHANG"
    "ED\020\002\022\031\n\025PLAYER_HEALTH_CHANGED\020\003\022\034\n\030ROUND"
    "_PLAY_TIMER_CHANGED\020\004\022\035\n\031ROUND_BEGIN_TIM"
    "ER_CHANGED\020\005\022\017\n\013ROUND_ENDED\020\006\022\017\n\013MATCH_E"
    "NDED\020\007\022\030\n\024PLAYER_ATTACK_ACTION\020\010\022\027\n\023PLAY"
    "ER_BLOCK_ACTION\020\t\022\025\n\021RINGMASTER_ACTION\020\n"
    "\022\027\n\023SYSTEM_INFO_REFRESH\020\013\022\030\n\024UNRECOGNIZE"
    "D_GESTURE\020\014\"L\n\013RoundResult\022\r\n\tROUND_TIE\020"
    "\000\022\026\n\022PLAYER_1_ROUND_WIN\020\001\022\026\n\022PLAYER_2_RO"
    "UND_WIN\020\002\"=\n\013MatchResult\022\026\n\022PLAYER_1_MAT"
    "CH_WIN\020\000\022\026\n\022PLAYER_2_MATCH_WIN\020\001\"@\n\017Fire"
    "EmitterType\022\r\n\tLEFT_RAIL\020\000\022\016\n\nRIGHT_RAIL"
    "\020\001\022\016\n\nOUTER_RING\020\002\"I\n\020FlameEmitterType\022\020"
    "\n\014ATTACK_FLAME\020\000\022\017\n\013BLOCK_FLAME\020\001\022\022\n\016NON"
    "_GAME_FLAME\020\002\"\203\005\n\nAttackType\022\024\n\020CUSTOM_U"
    "NDEFINED\020\000\022\014\n\010LEFT_JAB\020\001\022\r\n\tRIGHT_JAB\020\002\022"
    "\r\n\tLEFT_HOOK\020\003\022\016\n\nRIGHT_HOOK\020\004\022\021\n\rLEFT_U"
    "PPERCUT\020\005\022\022\n\016RIGHT_UPPERCUT\020\006\022\r\n\tLEFT_CH"
    "OP\020\007\022\016\n\nRIGHT_CHOP\020\010\022\014\n\010HADOUKEN\020\t\022\016\n\nSO"
    "NIC_BOOM\020\n\022\031\n\025LEFT_SHORYUKEN_ATTACK\020\013\022\032\n"
    "\026RIGHT_SHORYUKEN_ATTACK\020\014\022\030\n\024DOUBLE_LARI"
    "AT_ATTACK\020\r\022\033\n\027QUADRUPLE_LARIAT_ATTACK\020\016"
    "\022\030\n\024SUMO_HEADBUTT_ATTACK\020\017\022%\n!LEFT_ONE_H"
    "UNDRED_HAND_SLAP_ATTACK\020\020\022&\n\"RIGHT_ONE_H"
    "UNDRED_HAND_SLAP_ATTACK\020\021\022+\n\'TWO_HANDED_"
    "ONE_HUNDRED_HAND_SLAP_ATTACK\020\022\022\031\n\025PSYCHO"
    "_CRUSHER_ATTACK\020\023\022\017\n\013YMCA_ATTACK\020\024\022\023\n\017NY"
    "AN_CAT_ATTACK\020\025\022\024\n\020DISCO_STU_ATTACK\020\026\022\027\n"
    "\023ARM_WINDMILL_ATTACK\020\027\022\022\n\016SUCK_IT_ATTACK"
    "\020\030\022\032\n\026LEFT_VAFANAPOLI_ATTACK\020\031\022\033\n\027RIGHT_"
    "VAFANAPOLI_ATTACK\020\032\"\344\001\n\024RingmasterAction"
    "Type\022\031\n\025LEFT_HALF_RING_ACTION\020\000\022\032\n\026RIGHT"
    "_HALF_RING_ACTION\020\001\022\023\n\017LEFT_JAB_ACTION\020\002"
    "\022\024\n\020RIGHT_JAB_ACTION\020\003\022\023\n\017ERUPTION_ACTIO"
    "N\020\004\022\026\n\022LEFT_CIRCLE_ACTION\020\005\022\027\n\023RIGHT_CIR"
    "CLE_ACTION\020\006\022\023\n\017HADOUKEN_ACTION\020\007\022\017\n\013DRU"
    "M_ACTION\020\010\"A\n\027RoundBeginCountdownTime\022\t\n"
    "\005THREE\020\000\022\007\n\003TWO\020\001\022\007\n\003ONE\020\002\022\t\n\005FIGHT\020\003B\032\n"
    "\030ca.site3.ssf.guiprotocol", 2705);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event.proto", &protobuf_RegisterTypes);
  GameEvent::default_instance_ = new GameEvent();
  GameEvent_FireEmitter::default_instance_ = new GameEvent_FireEmitter();
  GameEvent::default_instance_->InitAsDefaultInstance();
  GameEvent_FireEmitter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_2eproto {
  StaticDescriptorInitializer_event_2eproto() {
    protobuf_AddDesc_event_2eproto();
  }
} static_descriptor_initializer_event_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* GameEvent_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_EventType_descriptor_;
}
bool GameEvent_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameEvent_EventType GameEvent::GAME_INFO_REFRESH;
const GameEvent_EventType GameEvent::FIRE_EMITTER_CHANGED;
const GameEvent_EventType GameEvent::GAME_STATE_CHANGED;
const GameEvent_EventType GameEvent::PLAYER_HEALTH_CHANGED;
const GameEvent_EventType GameEvent::ROUND_PLAY_TIMER_CHANGED;
const GameEvent_EventType GameEvent::ROUND_BEGIN_TIMER_CHANGED;
const GameEvent_EventType GameEvent::ROUND_ENDED;
const GameEvent_EventType GameEvent::MATCH_ENDED;
const GameEvent_EventType GameEvent::PLAYER_ATTACK_ACTION;
const GameEvent_EventType GameEvent::PLAYER_BLOCK_ACTION;
const GameEvent_EventType GameEvent::RINGMASTER_ACTION;
const GameEvent_EventType GameEvent::SYSTEM_INFO_REFRESH;
const GameEvent_EventType GameEvent::UNRECOGNIZED_GESTURE;
const GameEvent_EventType GameEvent::EventType_MIN;
const GameEvent_EventType GameEvent::EventType_MAX;
const int GameEvent::EventType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameEvent_RoundResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_RoundResult_descriptor_;
}
bool GameEvent_RoundResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameEvent_RoundResult GameEvent::ROUND_TIE;
const GameEvent_RoundResult GameEvent::PLAYER_1_ROUND_WIN;
const GameEvent_RoundResult GameEvent::PLAYER_2_ROUND_WIN;
const GameEvent_RoundResult GameEvent::RoundResult_MIN;
const GameEvent_RoundResult GameEvent::RoundResult_MAX;
const int GameEvent::RoundResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameEvent_MatchResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_MatchResult_descriptor_;
}
bool GameEvent_MatchResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameEvent_MatchResult GameEvent::PLAYER_1_MATCH_WIN;
const GameEvent_MatchResult GameEvent::PLAYER_2_MATCH_WIN;
const GameEvent_MatchResult GameEvent::MatchResult_MIN;
const GameEvent_MatchResult GameEvent::MatchResult_MAX;
const int GameEvent::MatchResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameEvent_FireEmitterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_FireEmitterType_descriptor_;
}
bool GameEvent_FireEmitterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameEvent_FireEmitterType GameEvent::LEFT_RAIL;
const GameEvent_FireEmitterType GameEvent::RIGHT_RAIL;
const GameEvent_FireEmitterType GameEvent::OUTER_RING;
const GameEvent_FireEmitterType GameEvent::FireEmitterType_MIN;
const GameEvent_FireEmitterType GameEvent::FireEmitterType_MAX;
const int GameEvent::FireEmitterType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameEvent_FlameEmitterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_FlameEmitterType_descriptor_;
}
bool GameEvent_FlameEmitterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameEvent_FlameEmitterType GameEvent::ATTACK_FLAME;
const GameEvent_FlameEmitterType GameEvent::BLOCK_FLAME;
const GameEvent_FlameEmitterType GameEvent::NON_GAME_FLAME;
const GameEvent_FlameEmitterType GameEvent::FlameEmitterType_MIN;
const GameEvent_FlameEmitterType GameEvent::FlameEmitterType_MAX;
const int GameEvent::FlameEmitterType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameEvent_AttackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_AttackType_descriptor_;
}
bool GameEvent_AttackType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameEvent_AttackType GameEvent::CUSTOM_UNDEFINED;
const GameEvent_AttackType GameEvent::LEFT_JAB;
const GameEvent_AttackType GameEvent::RIGHT_JAB;
const GameEvent_AttackType GameEvent::LEFT_HOOK;
const GameEvent_AttackType GameEvent::RIGHT_HOOK;
const GameEvent_AttackType GameEvent::LEFT_UPPERCUT;
const GameEvent_AttackType GameEvent::RIGHT_UPPERCUT;
const GameEvent_AttackType GameEvent::LEFT_CHOP;
const GameEvent_AttackType GameEvent::RIGHT_CHOP;
const GameEvent_AttackType GameEvent::HADOUKEN;
const GameEvent_AttackType GameEvent::SONIC_BOOM;
const GameEvent_AttackType GameEvent::LEFT_SHORYUKEN_ATTACK;
const GameEvent_AttackType GameEvent::RIGHT_SHORYUKEN_ATTACK;
const GameEvent_AttackType GameEvent::DOUBLE_LARIAT_ATTACK;
const GameEvent_AttackType GameEvent::QUADRUPLE_LARIAT_ATTACK;
const GameEvent_AttackType GameEvent::SUMO_HEADBUTT_ATTACK;
const GameEvent_AttackType GameEvent::LEFT_ONE_HUNDRED_HAND_SLAP_ATTACK;
const GameEvent_AttackType GameEvent::RIGHT_ONE_HUNDRED_HAND_SLAP_ATTACK;
const GameEvent_AttackType GameEvent::TWO_HANDED_ONE_HUNDRED_HAND_SLAP_ATTACK;
const GameEvent_AttackType GameEvent::PSYCHO_CRUSHER_ATTACK;
const GameEvent_AttackType GameEvent::YMCA_ATTACK;
const GameEvent_AttackType GameEvent::NYAN_CAT_ATTACK;
const GameEvent_AttackType GameEvent::DISCO_STU_ATTACK;
const GameEvent_AttackType GameEvent::ARM_WINDMILL_ATTACK;
const GameEvent_AttackType GameEvent::SUCK_IT_ATTACK;
const GameEvent_AttackType GameEvent::LEFT_VAFANAPOLI_ATTACK;
const GameEvent_AttackType GameEvent::RIGHT_VAFANAPOLI_ATTACK;
const GameEvent_AttackType GameEvent::AttackType_MIN;
const GameEvent_AttackType GameEvent::AttackType_MAX;
const int GameEvent::AttackType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameEvent_RingmasterActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_RingmasterActionType_descriptor_;
}
bool GameEvent_RingmasterActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameEvent_RingmasterActionType GameEvent::LEFT_HALF_RING_ACTION;
const GameEvent_RingmasterActionType GameEvent::RIGHT_HALF_RING_ACTION;
const GameEvent_RingmasterActionType GameEvent::LEFT_JAB_ACTION;
const GameEvent_RingmasterActionType GameEvent::RIGHT_JAB_ACTION;
const GameEvent_RingmasterActionType GameEvent::ERUPTION_ACTION;
const GameEvent_RingmasterActionType GameEvent::LEFT_CIRCLE_ACTION;
const GameEvent_RingmasterActionType GameEvent::RIGHT_CIRCLE_ACTION;
const GameEvent_RingmasterActionType GameEvent::HADOUKEN_ACTION;
const GameEvent_RingmasterActionType GameEvent::DRUM_ACTION;
const GameEvent_RingmasterActionType GameEvent::RingmasterActionType_MIN;
const GameEvent_RingmasterActionType GameEvent::RingmasterActionType_MAX;
const int GameEvent::RingmasterActionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameEvent_RoundBeginCountdownTime_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_RoundBeginCountdownTime_descriptor_;
}
bool GameEvent_RoundBeginCountdownTime_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameEvent_RoundBeginCountdownTime GameEvent::THREE;
const GameEvent_RoundBeginCountdownTime GameEvent::TWO;
const GameEvent_RoundBeginCountdownTime GameEvent::ONE;
const GameEvent_RoundBeginCountdownTime GameEvent::FIGHT;
const GameEvent_RoundBeginCountdownTime GameEvent::RoundBeginCountdownTime_MIN;
const GameEvent_RoundBeginCountdownTime GameEvent::RoundBeginCountdownTime_MAX;
const int GameEvent::RoundBeginCountdownTime_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameEvent_FireEmitter::kEmitterIndexFieldNumber;
const int GameEvent_FireEmitter::kEmitterTypeFieldNumber;
const int GameEvent_FireEmitter::kIntensityRingmasterFieldNumber;
const int GameEvent_FireEmitter::kIntensityPlayer1FieldNumber;
const int GameEvent_FireEmitter::kIntensityPlayer2FieldNumber;
#endif  // !_MSC_VER

GameEvent_FireEmitter::GameEvent_FireEmitter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEvent_FireEmitter::InitAsDefaultInstance() {
}

GameEvent_FireEmitter::GameEvent_FireEmitter(const GameEvent_FireEmitter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEvent_FireEmitter::SharedCtor() {
  _cached_size_ = 0;
  emitterindex_ = 0;
  emittertype_ = 0;
  intensityringmaster_ = 0;
  intensityplayer1_ = 0;
  intensityplayer2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEvent_FireEmitter::~GameEvent_FireEmitter() {
  SharedDtor();
}

void GameEvent_FireEmitter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEvent_FireEmitter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent_FireEmitter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_FireEmitter_descriptor_;
}

const GameEvent_FireEmitter& GameEvent_FireEmitter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

GameEvent_FireEmitter* GameEvent_FireEmitter::default_instance_ = NULL;

GameEvent_FireEmitter* GameEvent_FireEmitter::New() const {
  return new GameEvent_FireEmitter;
}

void GameEvent_FireEmitter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    emitterindex_ = 0;
    emittertype_ = 0;
    intensityringmaster_ = 0;
    intensityplayer1_ = 0;
    intensityplayer2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEvent_FireEmitter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 emitterIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emitterindex_)));
          set_has_emitterindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_emitterType;
        break;
      }
      
      // required .guiprotocol.GameEvent.FireEmitterType emitterType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emitterType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::GameEvent_FireEmitterType_IsValid(value)) {
            set_emittertype(static_cast< ::guiprotocol::GameEvent_FireEmitterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_intensityRingmaster;
        break;
      }
      
      // required float intensityRingmaster = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intensityRingmaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensityringmaster_)));
          set_has_intensityringmaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_intensityPlayer1;
        break;
      }
      
      // required float intensityPlayer1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intensityPlayer1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensityplayer1_)));
          set_has_intensityplayer1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_intensityPlayer2;
        break;
      }
      
      // required float intensityPlayer2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intensityPlayer2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensityplayer2_)));
          set_has_intensityplayer2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEvent_FireEmitter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 emitterIndex = 1;
  if (has_emitterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->emitterindex(), output);
  }
  
  // required .guiprotocol.GameEvent.FireEmitterType emitterType = 2;
  if (has_emittertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->emittertype(), output);
  }
  
  // required float intensityRingmaster = 3;
  if (has_intensityringmaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->intensityringmaster(), output);
  }
  
  // required float intensityPlayer1 = 4;
  if (has_intensityplayer1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->intensityplayer1(), output);
  }
  
  // required float intensityPlayer2 = 5;
  if (has_intensityplayer2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->intensityplayer2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEvent_FireEmitter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 emitterIndex = 1;
  if (has_emitterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->emitterindex(), target);
  }
  
  // required .guiprotocol.GameEvent.FireEmitterType emitterType = 2;
  if (has_emittertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->emittertype(), target);
  }
  
  // required float intensityRingmaster = 3;
  if (has_intensityringmaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->intensityringmaster(), target);
  }
  
  // required float intensityPlayer1 = 4;
  if (has_intensityplayer1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->intensityplayer1(), target);
  }
  
  // required float intensityPlayer2 = 5;
  if (has_intensityplayer2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->intensityplayer2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEvent_FireEmitter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 emitterIndex = 1;
    if (has_emitterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emitterindex());
    }
    
    // required .guiprotocol.GameEvent.FireEmitterType emitterType = 2;
    if (has_emittertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->emittertype());
    }
    
    // required float intensityRingmaster = 3;
    if (has_intensityringmaster()) {
      total_size += 1 + 4;
    }
    
    // required float intensityPlayer1 = 4;
    if (has_intensityplayer1()) {
      total_size += 1 + 4;
    }
    
    // required float intensityPlayer2 = 5;
    if (has_intensityplayer2()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent_FireEmitter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEvent_FireEmitter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEvent_FireEmitter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEvent_FireEmitter::MergeFrom(const GameEvent_FireEmitter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emitterindex()) {
      set_emitterindex(from.emitterindex());
    }
    if (from.has_emittertype()) {
      set_emittertype(from.emittertype());
    }
    if (from.has_intensityringmaster()) {
      set_intensityringmaster(from.intensityringmaster());
    }
    if (from.has_intensityplayer1()) {
      set_intensityplayer1(from.intensityplayer1());
    }
    if (from.has_intensityplayer2()) {
      set_intensityplayer2(from.intensityplayer2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEvent_FireEmitter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent_FireEmitter::CopyFrom(const GameEvent_FireEmitter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_FireEmitter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void GameEvent_FireEmitter::Swap(GameEvent_FireEmitter* other) {
  if (other != this) {
    std::swap(emitterindex_, other->emitterindex_);
    std::swap(emittertype_, other->emittertype_);
    std::swap(intensityringmaster_, other->intensityringmaster_);
    std::swap(intensityplayer1_, other->intensityplayer1_);
    std::swap(intensityplayer2_, other->intensityplayer2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEvent_FireEmitter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEvent_FireEmitter_descriptor_;
  metadata.reflection = GameEvent_FireEmitter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameEvent::kTypeFieldNumber;
const int GameEvent::kEmitterFieldNumber;
const int GameEvent::kOldGameStateFieldNumber;
const int GameEvent::kNewGameStateFieldNumber;
const int GameEvent::kMatchResultFieldNumber;
const int GameEvent::kPlayerFieldNumber;
const int GameEvent::kAttackTypeFieldNumber;
const int GameEvent::kOldHealthFieldNumber;
const int GameEvent::kNewHealthFieldNumber;
const int GameEvent::kRoundNumberFieldNumber;
const int GameEvent::kRoundBeginTimerFieldNumber;
const int GameEvent::kRoundResultFieldNumber;
const int GameEvent::kTimedOutFieldNumber;
const int GameEvent::kTimeInSecsFieldNumber;
const int GameEvent::kGameStateFieldNumber;
const int GameEvent::kRoundResultsFieldNumber;
const int GameEvent::kPlayer1HealthFieldNumber;
const int GameEvent::kPlayer2HealthFieldNumber;
const int GameEvent::kRoundInPlayTimerFieldNumber;
const int GameEvent::kPlayer1UnlimitedMovesOnFieldNumber;
const int GameEvent::kPlayer2UnlimitedMovesOnFieldNumber;
const int GameEvent::kRingmasterActionTypeFieldNumber;
#endif  // !_MSC_VER

GameEvent::GameEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEvent::InitAsDefaultInstance() {
  emitter_ = const_cast< ::guiprotocol::GameEvent_FireEmitter*>(&::guiprotocol::GameEvent_FireEmitter::default_instance());
}

GameEvent::GameEvent(const GameEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  emitter_ = NULL;
  oldgamestate_ = 0;
  newgamestate_ = 0;
  matchresult_ = 0;
  player_ = 0;
  attacktype_ = 0;
  oldhealth_ = 0;
  newhealth_ = 0;
  roundnumber_ = 0;
  roundbegintimer_ = 0;
  roundresult_ = 0;
  timedout_ = false;
  timeinsecs_ = 0;
  gamestate_ = 0;
  player1health_ = 0;
  player2health_ = 0;
  roundinplaytimer_ = 0;
  player1unlimitedmoveson_ = false;
  player2unlimitedmoveson_ = false;
  ringmasteractiontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEvent::~GameEvent() {
  SharedDtor();
}

void GameEvent::SharedDtor() {
  if (this != default_instance_) {
    delete emitter_;
  }
}

void GameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEvent_descriptor_;
}

const GameEvent& GameEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();  return *default_instance_;
}

GameEvent* GameEvent::default_instance_ = NULL;

GameEvent* GameEvent::New() const {
  return new GameEvent;
}

void GameEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_emitter()) {
      if (emitter_ != NULL) emitter_->::guiprotocol::GameEvent_FireEmitter::Clear();
    }
    oldgamestate_ = 0;
    newgamestate_ = 0;
    matchresult_ = 0;
    player_ = 0;
    attacktype_ = 0;
    oldhealth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    newhealth_ = 0;
    roundnumber_ = 0;
    roundbegintimer_ = 0;
    roundresult_ = 0;
    timedout_ = false;
    timeinsecs_ = 0;
    gamestate_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    player1health_ = 0;
    player2health_ = 0;
    roundinplaytimer_ = 0;
    player1unlimitedmoveson_ = false;
    player2unlimitedmoveson_ = false;
    ringmasteractiontype_ = 0;
  }
  roundresults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .guiprotocol.GameEvent.EventType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::GameEvent_EventType_IsValid(value)) {
            set_type(static_cast< ::guiprotocol::GameEvent_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_emitter;
        break;
      }
      
      // optional .guiprotocol.GameEvent.FireEmitter emitter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emitter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emitter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldGameState;
        break;
      }
      
      // optional .guiprotocol.GameState oldGameState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldGameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guiprotocol::GameState_IsValid(value)) {
            set_oldgamestate(static_cast< guiprotocol::GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newGameState;
        break;
      }
      
      // optional .guiprotocol.GameState newGameState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newGameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guiprotocol::GameState_IsValid(value)) {
            set_newgamestate(static_cast< guiprotocol::GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_matchResult;
        break;
      }
      
      // optional .guiprotocol.GameEvent.MatchResult matchResult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::GameEvent_MatchResult_IsValid(value)) {
            set_matchresult(static_cast< ::guiprotocol::GameEvent_MatchResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player;
        break;
      }
      
      // optional .guiprotocol.Player player = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guiprotocol::Player_IsValid(value)) {
            set_player(static_cast< guiprotocol::Player >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attackType;
        break;
      }
      
      // optional .guiprotocol.GameEvent.AttackType attackType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::GameEvent_AttackType_IsValid(value)) {
            set_attacktype(static_cast< ::guiprotocol::GameEvent_AttackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_oldHealth;
        break;
      }
      
      // optional float oldHealth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_oldHealth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oldhealth_)));
          set_has_oldhealth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_newHealth;
        break;
      }
      
      // optional float newHealth = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_newHealth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &newhealth_)));
          set_has_newhealth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_roundNumber;
        break;
      }
      
      // optional int32 roundNumber = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundnumber_)));
          set_has_roundnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_roundBeginTimer;
        break;
      }
      
      // optional .guiprotocol.GameEvent.RoundBeginCountdownTime roundBeginTimer = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundBeginTimer:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::GameEvent_RoundBeginCountdownTime_IsValid(value)) {
            set_roundbegintimer(static_cast< ::guiprotocol::GameEvent_RoundBeginCountdownTime >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_roundResult;
        break;
      }
      
      // optional .guiprotocol.GameEvent.RoundResult roundResult = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::GameEvent_RoundResult_IsValid(value)) {
            set_roundresult(static_cast< ::guiprotocol::GameEvent_RoundResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_timedOut;
        break;
      }
      
      // optional bool timedOut = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timedOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timedout_)));
          set_has_timedout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_timeInSecs;
        break;
      }
      
      // optional int32 timeInSecs = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeInSecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeinsecs_)));
          set_has_timeinsecs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gameState;
        break;
      }
      
      // optional .guiprotocol.GameState gameState = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guiprotocol::GameState_IsValid(value)) {
            set_gamestate(static_cast< guiprotocol::GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_roundResults;
        break;
      }
      
      // repeated .guiprotocol.GameEvent.RoundResult roundResults = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundResults:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::GameEvent_RoundResult_IsValid(value)) {
            add_roundresults(static_cast< ::guiprotocol::GameEvent_RoundResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::guiprotocol::GameEvent_RoundResult_IsValid,
                 this->mutable_roundresults())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_roundResults;
        if (input->ExpectTag(149)) goto parse_player1Health;
        break;
      }
      
      // optional float player1Health = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player1Health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player1health_)));
          set_has_player1health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_player2Health;
        break;
      }
      
      // optional float player2Health = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player2Health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player2health_)));
          set_has_player2health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_roundInPlayTimer;
        break;
      }
      
      // optional int32 roundInPlayTimer = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundInPlayTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundinplaytimer_)));
          set_has_roundinplaytimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_player1UnlimitedMovesOn;
        break;
      }
      
      // optional bool player1UnlimitedMovesOn = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player1UnlimitedMovesOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player1unlimitedmoveson_)));
          set_has_player1unlimitedmoveson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_player2UnlimitedMovesOn;
        break;
      }
      
      // optional bool player2UnlimitedMovesOn = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player2UnlimitedMovesOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player2unlimitedmoveson_)));
          set_has_player2unlimitedmoveson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_ringmasterActionType;
        break;
      }
      
      // optional .guiprotocol.GameEvent.RingmasterActionType ringmasterActionType = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ringmasterActionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::GameEvent_RingmasterActionType_IsValid(value)) {
            set_ringmasteractiontype(static_cast< ::guiprotocol::GameEvent_RingmasterActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .guiprotocol.GameEvent.EventType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .guiprotocol.GameEvent.FireEmitter emitter = 2;
  if (has_emitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->emitter(), output);
  }
  
  // optional .guiprotocol.GameState oldGameState = 3;
  if (has_oldgamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->oldgamestate(), output);
  }
  
  // optional .guiprotocol.GameState newGameState = 4;
  if (has_newgamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->newgamestate(), output);
  }
  
  // optional .guiprotocol.GameEvent.MatchResult matchResult = 5;
  if (has_matchresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->matchresult(), output);
  }
  
  // optional .guiprotocol.Player player = 6;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->player(), output);
  }
  
  // optional .guiprotocol.GameEvent.AttackType attackType = 7;
  if (has_attacktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->attacktype(), output);
  }
  
  // optional float oldHealth = 9;
  if (has_oldhealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->oldhealth(), output);
  }
  
  // optional float newHealth = 10;
  if (has_newhealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->newhealth(), output);
  }
  
  // optional int32 roundNumber = 11;
  if (has_roundnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->roundnumber(), output);
  }
  
  // optional .guiprotocol.GameEvent.RoundBeginCountdownTime roundBeginTimer = 12;
  if (has_roundbegintimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->roundbegintimer(), output);
  }
  
  // optional .guiprotocol.GameEvent.RoundResult roundResult = 13;
  if (has_roundresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->roundresult(), output);
  }
  
  // optional bool timedOut = 14;
  if (has_timedout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->timedout(), output);
  }
  
  // optional int32 timeInSecs = 15;
  if (has_timeinsecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->timeinsecs(), output);
  }
  
  // optional .guiprotocol.GameState gameState = 16;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->gamestate(), output);
  }
  
  // repeated .guiprotocol.GameEvent.RoundResult roundResults = 17;
  for (int i = 0; i < this->roundresults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->roundresults(i), output);
  }
  
  // optional float player1Health = 18;
  if (has_player1health()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->player1health(), output);
  }
  
  // optional float player2Health = 19;
  if (has_player2health()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->player2health(), output);
  }
  
  // optional int32 roundInPlayTimer = 20;
  if (has_roundinplaytimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->roundinplaytimer(), output);
  }
  
  // optional bool player1UnlimitedMovesOn = 22;
  if (has_player1unlimitedmoveson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->player1unlimitedmoveson(), output);
  }
  
  // optional bool player2UnlimitedMovesOn = 23;
  if (has_player2unlimitedmoveson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->player2unlimitedmoveson(), output);
  }
  
  // optional .guiprotocol.GameEvent.RingmasterActionType ringmasterActionType = 24;
  if (has_ringmasteractiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->ringmasteractiontype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .guiprotocol.GameEvent.EventType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .guiprotocol.GameEvent.FireEmitter emitter = 2;
  if (has_emitter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->emitter(), target);
  }
  
  // optional .guiprotocol.GameState oldGameState = 3;
  if (has_oldgamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->oldgamestate(), target);
  }
  
  // optional .guiprotocol.GameState newGameState = 4;
  if (has_newgamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->newgamestate(), target);
  }
  
  // optional .guiprotocol.GameEvent.MatchResult matchResult = 5;
  if (has_matchresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->matchresult(), target);
  }
  
  // optional .guiprotocol.Player player = 6;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->player(), target);
  }
  
  // optional .guiprotocol.GameEvent.AttackType attackType = 7;
  if (has_attacktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->attacktype(), target);
  }
  
  // optional float oldHealth = 9;
  if (has_oldhealth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->oldhealth(), target);
  }
  
  // optional float newHealth = 10;
  if (has_newhealth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->newhealth(), target);
  }
  
  // optional int32 roundNumber = 11;
  if (has_roundnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->roundnumber(), target);
  }
  
  // optional .guiprotocol.GameEvent.RoundBeginCountdownTime roundBeginTimer = 12;
  if (has_roundbegintimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->roundbegintimer(), target);
  }
  
  // optional .guiprotocol.GameEvent.RoundResult roundResult = 13;
  if (has_roundresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->roundresult(), target);
  }
  
  // optional bool timedOut = 14;
  if (has_timedout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->timedout(), target);
  }
  
  // optional int32 timeInSecs = 15;
  if (has_timeinsecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->timeinsecs(), target);
  }
  
  // optional .guiprotocol.GameState gameState = 16;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->gamestate(), target);
  }
  
  // repeated .guiprotocol.GameEvent.RoundResult roundResults = 17;
  for (int i = 0; i < this->roundresults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->roundresults(i), target);
  }
  
  // optional float player1Health = 18;
  if (has_player1health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->player1health(), target);
  }
  
  // optional float player2Health = 19;
  if (has_player2health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->player2health(), target);
  }
  
  // optional int32 roundInPlayTimer = 20;
  if (has_roundinplaytimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->roundinplaytimer(), target);
  }
  
  // optional bool player1UnlimitedMovesOn = 22;
  if (has_player1unlimitedmoveson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->player1unlimitedmoveson(), target);
  }
  
  // optional bool player2UnlimitedMovesOn = 23;
  if (has_player2unlimitedmoveson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->player2unlimitedmoveson(), target);
  }
  
  // optional .guiprotocol.GameEvent.RingmasterActionType ringmasterActionType = 24;
  if (has_ringmasteractiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->ringmasteractiontype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .guiprotocol.GameEvent.EventType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .guiprotocol.GameEvent.FireEmitter emitter = 2;
    if (has_emitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emitter());
    }
    
    // optional .guiprotocol.GameState oldGameState = 3;
    if (has_oldgamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oldgamestate());
    }
    
    // optional .guiprotocol.GameState newGameState = 4;
    if (has_newgamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->newgamestate());
    }
    
    // optional .guiprotocol.GameEvent.MatchResult matchResult = 5;
    if (has_matchresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matchresult());
    }
    
    // optional .guiprotocol.Player player = 6;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->player());
    }
    
    // optional .guiprotocol.GameEvent.AttackType attackType = 7;
    if (has_attacktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attacktype());
    }
    
    // optional float oldHealth = 9;
    if (has_oldhealth()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float newHealth = 10;
    if (has_newhealth()) {
      total_size += 1 + 4;
    }
    
    // optional int32 roundNumber = 11;
    if (has_roundnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundnumber());
    }
    
    // optional .guiprotocol.GameEvent.RoundBeginCountdownTime roundBeginTimer = 12;
    if (has_roundbegintimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roundbegintimer());
    }
    
    // optional .guiprotocol.GameEvent.RoundResult roundResult = 13;
    if (has_roundresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roundresult());
    }
    
    // optional bool timedOut = 14;
    if (has_timedout()) {
      total_size += 1 + 1;
    }
    
    // optional int32 timeInSecs = 15;
    if (has_timeinsecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeinsecs());
    }
    
    // optional .guiprotocol.GameState gameState = 16;
    if (has_gamestate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float player1Health = 18;
    if (has_player1health()) {
      total_size += 2 + 4;
    }
    
    // optional float player2Health = 19;
    if (has_player2health()) {
      total_size += 2 + 4;
    }
    
    // optional int32 roundInPlayTimer = 20;
    if (has_roundinplaytimer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundinplaytimer());
    }
    
    // optional bool player1UnlimitedMovesOn = 22;
    if (has_player1unlimitedmoveson()) {
      total_size += 2 + 1;
    }
    
    // optional bool player2UnlimitedMovesOn = 23;
    if (has_player2unlimitedmoveson()) {
      total_size += 2 + 1;
    }
    
    // optional .guiprotocol.GameEvent.RingmasterActionType ringmasterActionType = 24;
    if (has_ringmasteractiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ringmasteractiontype());
    }
    
  }
  // repeated .guiprotocol.GameEvent.RoundResult roundResults = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->roundresults_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->roundresults(i));
    }
    total_size += 2 * this->roundresults_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEvent::MergeFrom(const GameEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundresults_.MergeFrom(from.roundresults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_emitter()) {
      mutable_emitter()->::guiprotocol::GameEvent_FireEmitter::MergeFrom(from.emitter());
    }
    if (from.has_oldgamestate()) {
      set_oldgamestate(from.oldgamestate());
    }
    if (from.has_newgamestate()) {
      set_newgamestate(from.newgamestate());
    }
    if (from.has_matchresult()) {
      set_matchresult(from.matchresult());
    }
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_attacktype()) {
      set_attacktype(from.attacktype());
    }
    if (from.has_oldhealth()) {
      set_oldhealth(from.oldhealth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_newhealth()) {
      set_newhealth(from.newhealth());
    }
    if (from.has_roundnumber()) {
      set_roundnumber(from.roundnumber());
    }
    if (from.has_roundbegintimer()) {
      set_roundbegintimer(from.roundbegintimer());
    }
    if (from.has_roundresult()) {
      set_roundresult(from.roundresult());
    }
    if (from.has_timedout()) {
      set_timedout(from.timedout());
    }
    if (from.has_timeinsecs()) {
      set_timeinsecs(from.timeinsecs());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_player1health()) {
      set_player1health(from.player1health());
    }
    if (from.has_player2health()) {
      set_player2health(from.player2health());
    }
    if (from.has_roundinplaytimer()) {
      set_roundinplaytimer(from.roundinplaytimer());
    }
    if (from.has_player1unlimitedmoveson()) {
      set_player1unlimitedmoveson(from.player1unlimitedmoveson());
    }
    if (from.has_player2unlimitedmoveson()) {
      set_player2unlimitedmoveson(from.player2unlimitedmoveson());
    }
    if (from.has_ringmasteractiontype()) {
      set_ringmasteractiontype(from.ringmasteractiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEvent::CopyFrom(const GameEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_emitter()) {
    if (!this->emitter().IsInitialized()) return false;
  }
  return true;
}

void GameEvent::Swap(GameEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(emitter_, other->emitter_);
    std::swap(oldgamestate_, other->oldgamestate_);
    std::swap(newgamestate_, other->newgamestate_);
    std::swap(matchresult_, other->matchresult_);
    std::swap(player_, other->player_);
    std::swap(attacktype_, other->attacktype_);
    std::swap(oldhealth_, other->oldhealth_);
    std::swap(newhealth_, other->newhealth_);
    std::swap(roundnumber_, other->roundnumber_);
    std::swap(roundbegintimer_, other->roundbegintimer_);
    std::swap(roundresult_, other->roundresult_);
    std::swap(timedout_, other->timedout_);
    std::swap(timeinsecs_, other->timeinsecs_);
    std::swap(gamestate_, other->gamestate_);
    roundresults_.Swap(&other->roundresults_);
    std::swap(player1health_, other->player1health_);
    std::swap(player2health_, other->player2health_);
    std::swap(roundinplaytimer_, other->roundinplaytimer_);
    std::swap(player1unlimitedmoveson_, other->player1unlimitedmoveson_);
    std::swap(player2unlimitedmoveson_, other->player2unlimitedmoveson_);
    std::swap(ringmasteractiontype_, other->ringmasteractiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEvent_descriptor_;
  metadata.reflection = GameEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guiprotocol

// @@protoc_insertion_point(global_scope)
