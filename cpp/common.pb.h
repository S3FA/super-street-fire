// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace guiprotocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();


enum GameState {
  NO_STATE = 0,
  ROUND_BEGINNING_STATE = 1,
  ROUND_IN_PLAY_STATE = 2,
  ROUND_ENDED_STATE = 3,
  TIE_BREAKER_ROUND_STATE = 4,
  MATCH_ENDED_STATE = 5,
  PAUSED_STATE = 6,
  RINGMASTER_STATE = 7,
  IDLE_STATE = 8,
  TEST_ROUND_STATE = 9
};
bool GameState_IsValid(int value);
const GameState GameState_MIN = NO_STATE;
const GameState GameState_MAX = TEST_ROUND_STATE;
const int GameState_ARRAYSIZE = GameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_descriptor();
inline const ::std::string& GameState_Name(GameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_descriptor(), value);
}
inline bool GameState_Parse(
    const ::std::string& name, GameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState>(
    GameState_descriptor(), name, value);
}
enum Player {
  RINGMASTER = 0,
  P1 = 1,
  P2 = 2
};
bool Player_IsValid(int value);
const Player Player_MIN = RINGMASTER;
const Player Player_MAX = P2;
const int Player_ARRAYSIZE = Player_MAX + 1;

const ::google::protobuf::EnumDescriptor* Player_descriptor();
inline const ::std::string& Player_Name(Player value) {
  return ::google::protobuf::internal::NameOfEnum(
    Player_descriptor(), value);
}
inline bool Player_Parse(
    const ::std::string& name, Player* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Player>(
    Player_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace guiprotocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< guiprotocol::GameState>() {
  return guiprotocol::GameState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< guiprotocol::Player>() {
  return guiprotocol::Player_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
