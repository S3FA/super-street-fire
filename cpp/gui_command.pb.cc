// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gui_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace guiprotocol {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_PlayerAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_RingmasterAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_FireEmitterType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gui_5fcommand_2eproto() {
  protobuf_AddDesc_gui_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gui_command.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, playeraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, lefthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, righthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, emittertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, emitterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, emitterentities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, dmgperflame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, flamewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, durationinseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, nextstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, ringmasteraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, unlimitedmoveson_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Command_CommandType_descriptor_ = Command_descriptor_->enum_type(0);
  Command_PlayerAction_descriptor_ = Command_descriptor_->enum_type(1);
  Command_RingmasterAction_descriptor_ = Command_descriptor_->enum_type(2);
  Command_FireEmitterType_descriptor_ = Command_descriptor_->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gui_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gui_5fcommand_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
}

void protobuf_AddDesc_gui_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::guiprotocol::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021gui_command.proto\022\013guiprotocol\032\014common"
    ".proto\"\244\013\n\007Command\022.\n\004type\030\001 \002(\0162 .guipr"
    "otocol.Command.CommandType\0227\n\014playerActi"
    "on\030\002 \001(\0162!.guiprotocol.Command.PlayerAct"
    "ion\022#\n\006player\030\003 \001(\0162\023.guiprotocol.Player"
    "\022\020\n\010leftHand\030\004 \001(\010\022\021\n\trightHand\030\005 \001(\010\0229\n"
    "\013emitterType\030\006 \001(\0162$.guiprotocol.Command"
    ".FireEmitterType\022\021\n\tintensity\030\007 \001(\002\022\024\n\014e"
    "mitterIndex\030\010 \001(\005\022,\n\017emitterEntities\030\t \003"
    "(\0162\023.guiprotocol.Player\022\023\n\013dmgPerFlame\030\n"
    " \001(\002\022\022\n\nflameWidth\030\013 \001(\005\022\031\n\021durationInSe"
    "conds\030\014 \001(\001\022\024\n\014acceleration\030\r \001(\001\022)\n\tnex"
    "tState\030\016 \001(\0162\026.guiprotocol.GameState\022\?\n\020"
    "ringmasterAction\030\017 \001(\0162%.guiprotocol.Com"
    "mand.RingmasterAction\022\030\n\020unlimitedMovesO"
    "n\030\020 \001(\010\"\365\001\n\013CommandType\022\032\n\026EXECUTE_GENER"
    "IC_ACTION\020\000\022\031\n\025EXECUTE_PLAYER_ACTION\020\001\022\020"
    "\n\014TOGGLE_PAUSE\020\002\022\r\n\tKILL_GAME\020\003\022\016\n\nNEXT_"
    "STATE\020\004\022\021\n\rTOUCH_EMITTER\020\005\022\033\n\027QUERY_GAME"
    "_INFO_REFRESH\020\006\022\035\n\031EXECUTE_RINGMASTER_AC"
    "TION\020\007\022\025\n\021QUERY_SYSTEM_INFO\020\010\022\030\n\024UPDATE_"
    "PLAYER_STATUS\020\t\"\260\003\n\014PlayerAction\022\t\n\005BLOC"
    "K\020\000\022\016\n\nJAB_ATTACK\020\001\022\017\n\013HOOK_ATTACK\020\002\022\023\n\017"
    "UPPERCUT_ATTACK\020\003\022\017\n\013CHOP_ATTACK\020\004\022\023\n\017HA"
    "DOUKEN_ATTACK\020\005\022\025\n\021SONIC_BOOM_ATTACK\020\006\022\024"
    "\n\020SHORYUKEN_ATTACK\020\007\022\030\n\024DOUBLE_LARIAT_AT"
    "TACK\020\010\022\033\n\027QUADRUPLE_LARIAT_ATTACK\020\t\022\030\n\024S"
    "UMO_HEADBUTT_ATTACK\020\n\022 \n\034ONE_HUNDRED_HAN"
    "D_SLAP_ATTACK\020\013\022\031\n\025PSYCHO_CRUSHER_ATTACK"
    "\020\014\022\017\n\013YMCA_ATTACK\020\r\022\023\n\017NYAN_CAT_ATTACK\020\016"
    "\022\024\n\020DISCO_STU_ATTACK\020\017\022\027\n\023ARM_WINDMILL_A"
    "TTACK\020\020\022\022\n\016SUCK_IT_ATTACK\020\021\022\025\n\021VAFANAPOL"
    "I_ATTACK\020\022\"\206\001\n\020RingmasterAction\022\024\n\020HALF_"
    "RING_ACTION\020\000\022\016\n\nJAB_ACTION\020\001\022\023\n\017ERUPTIO"
    "N_ACTION\020\002\022\021\n\rCIRCLE_ACTION\020\003\022\023\n\017HADOUKE"
    "N_ACTION\020\004\022\017\n\013DRUM_ACTION\020\005\"@\n\017FireEmitt"
    "erType\022\r\n\tLEFT_RAIL\020\000\022\016\n\nRIGHT_RAIL\020\001\022\016\n"
    "\nOUTER_RING\020\002B\032\n\030ca.site3.ssf.guiprotoco"
    "l", 1521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gui_command.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gui_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gui_5fcommand_2eproto {
  StaticDescriptorInitializer_gui_5fcommand_2eproto() {
    protobuf_AddDesc_gui_5fcommand_2eproto();
  }
} static_descriptor_initializer_gui_5fcommand_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_CommandType_descriptor_;
}
bool Command_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_CommandType Command::EXECUTE_GENERIC_ACTION;
const Command_CommandType Command::EXECUTE_PLAYER_ACTION;
const Command_CommandType Command::TOGGLE_PAUSE;
const Command_CommandType Command::KILL_GAME;
const Command_CommandType Command::NEXT_STATE;
const Command_CommandType Command::TOUCH_EMITTER;
const Command_CommandType Command::QUERY_GAME_INFO_REFRESH;
const Command_CommandType Command::EXECUTE_RINGMASTER_ACTION;
const Command_CommandType Command::QUERY_SYSTEM_INFO;
const Command_CommandType Command::UPDATE_PLAYER_STATUS;
const Command_CommandType Command::CommandType_MIN;
const Command_CommandType Command::CommandType_MAX;
const int Command::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Command_PlayerAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_PlayerAction_descriptor_;
}
bool Command_PlayerAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_PlayerAction Command::BLOCK;
const Command_PlayerAction Command::JAB_ATTACK;
const Command_PlayerAction Command::HOOK_ATTACK;
const Command_PlayerAction Command::UPPERCUT_ATTACK;
const Command_PlayerAction Command::CHOP_ATTACK;
const Command_PlayerAction Command::HADOUKEN_ATTACK;
const Command_PlayerAction Command::SONIC_BOOM_ATTACK;
const Command_PlayerAction Command::SHORYUKEN_ATTACK;
const Command_PlayerAction Command::DOUBLE_LARIAT_ATTACK;
const Command_PlayerAction Command::QUADRUPLE_LARIAT_ATTACK;
const Command_PlayerAction Command::SUMO_HEADBUTT_ATTACK;
const Command_PlayerAction Command::ONE_HUNDRED_HAND_SLAP_ATTACK;
const Command_PlayerAction Command::PSYCHO_CRUSHER_ATTACK;
const Command_PlayerAction Command::YMCA_ATTACK;
const Command_PlayerAction Command::NYAN_CAT_ATTACK;
const Command_PlayerAction Command::DISCO_STU_ATTACK;
const Command_PlayerAction Command::ARM_WINDMILL_ATTACK;
const Command_PlayerAction Command::SUCK_IT_ATTACK;
const Command_PlayerAction Command::VAFANAPOLI_ATTACK;
const Command_PlayerAction Command::PlayerAction_MIN;
const Command_PlayerAction Command::PlayerAction_MAX;
const int Command::PlayerAction_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Command_RingmasterAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_RingmasterAction_descriptor_;
}
bool Command_RingmasterAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_RingmasterAction Command::HALF_RING_ACTION;
const Command_RingmasterAction Command::JAB_ACTION;
const Command_RingmasterAction Command::ERUPTION_ACTION;
const Command_RingmasterAction Command::CIRCLE_ACTION;
const Command_RingmasterAction Command::HADOUKEN_ACTION;
const Command_RingmasterAction Command::DRUM_ACTION;
const Command_RingmasterAction Command::RingmasterAction_MIN;
const Command_RingmasterAction Command::RingmasterAction_MAX;
const int Command::RingmasterAction_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Command_FireEmitterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_FireEmitterType_descriptor_;
}
bool Command_FireEmitterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_FireEmitterType Command::LEFT_RAIL;
const Command_FireEmitterType Command::RIGHT_RAIL;
const Command_FireEmitterType Command::OUTER_RING;
const Command_FireEmitterType Command::FireEmitterType_MIN;
const Command_FireEmitterType Command::FireEmitterType_MAX;
const int Command::FireEmitterType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Command::kTypeFieldNumber;
const int Command::kPlayerActionFieldNumber;
const int Command::kPlayerFieldNumber;
const int Command::kLeftHandFieldNumber;
const int Command::kRightHandFieldNumber;
const int Command::kEmitterTypeFieldNumber;
const int Command::kIntensityFieldNumber;
const int Command::kEmitterIndexFieldNumber;
const int Command::kEmitterEntitiesFieldNumber;
const int Command::kDmgPerFlameFieldNumber;
const int Command::kFlameWidthFieldNumber;
const int Command::kDurationInSecondsFieldNumber;
const int Command::kAccelerationFieldNumber;
const int Command::kNextStateFieldNumber;
const int Command::kRingmasterActionFieldNumber;
const int Command::kUnlimitedMovesOnFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  playeraction_ = 0;
  player_ = 0;
  lefthand_ = false;
  righthand_ = false;
  emittertype_ = 0;
  intensity_ = 0;
  emitterindex_ = 0;
  dmgperflame_ = 0;
  flamewidth_ = 0;
  durationinseconds_ = 0;
  acceleration_ = 0;
  nextstate_ = 0;
  ringmasteraction_ = 0;
  unlimitedmoveson_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gui_5fcommand_2eproto();  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    playeraction_ = 0;
    player_ = 0;
    lefthand_ = false;
    righthand_ = false;
    emittertype_ = 0;
    intensity_ = 0;
    emitterindex_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    dmgperflame_ = 0;
    flamewidth_ = 0;
    durationinseconds_ = 0;
    acceleration_ = 0;
    nextstate_ = 0;
    ringmasteraction_ = 0;
    unlimitedmoveson_ = false;
  }
  emitterentities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .guiprotocol.Command.CommandType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::Command_CommandType_IsValid(value)) {
            set_type(static_cast< ::guiprotocol::Command_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerAction;
        break;
      }
      
      // optional .guiprotocol.Command.PlayerAction playerAction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::Command_PlayerAction_IsValid(value)) {
            set_playeraction(static_cast< ::guiprotocol::Command_PlayerAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player;
        break;
      }
      
      // optional .guiprotocol.Player player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guiprotocol::Player_IsValid(value)) {
            set_player(static_cast< guiprotocol::Player >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leftHand;
        break;
      }
      
      // optional bool leftHand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftHand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lefthand_)));
          set_has_lefthand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rightHand;
        break;
      }
      
      // optional bool rightHand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightHand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &righthand_)));
          set_has_righthand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_emitterType;
        break;
      }
      
      // optional .guiprotocol.Command.FireEmitterType emitterType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emitterType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::Command_FireEmitterType_IsValid(value)) {
            set_emittertype(static_cast< ::guiprotocol::Command_FireEmitterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_intensity;
        break;
      }
      
      // optional float intensity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_emitterIndex;
        break;
      }
      
      // optional int32 emitterIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emitterIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emitterindex_)));
          set_has_emitterindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_emitterEntities;
        break;
      }
      
      // repeated .guiprotocol.Player emitterEntities = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emitterEntities:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guiprotocol::Player_IsValid(value)) {
            add_emitterentities(static_cast< guiprotocol::Player >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &guiprotocol::Player_IsValid,
                 this->mutable_emitterentities())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_emitterEntities;
        if (input->ExpectTag(85)) goto parse_dmgPerFlame;
        break;
      }
      
      // optional float dmgPerFlame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmgPerFlame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmgperflame_)));
          set_has_dmgperflame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_flameWidth;
        break;
      }
      
      // optional int32 flameWidth = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flameWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flamewidth_)));
          set_has_flamewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_durationInSeconds;
        break;
      }
      
      // optional double durationInSeconds = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_durationInSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &durationinseconds_)));
          set_has_durationinseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_acceleration;
        break;
      }
      
      // optional double acceleration = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
          set_has_acceleration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nextState;
        break;
      }
      
      // optional .guiprotocol.GameState nextState = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (guiprotocol::GameState_IsValid(value)) {
            set_nextstate(static_cast< guiprotocol::GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ringmasterAction;
        break;
      }
      
      // optional .guiprotocol.Command.RingmasterAction ringmasterAction = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ringmasterAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::Command_RingmasterAction_IsValid(value)) {
            set_ringmasteraction(static_cast< ::guiprotocol::Command_RingmasterAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_unlimitedMovesOn;
        break;
      }
      
      // optional bool unlimitedMovesOn = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlimitedMovesOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlimitedmoveson_)));
          set_has_unlimitedmoveson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .guiprotocol.Command.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .guiprotocol.Command.PlayerAction playerAction = 2;
  if (has_playeraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->playeraction(), output);
  }
  
  // optional .guiprotocol.Player player = 3;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->player(), output);
  }
  
  // optional bool leftHand = 4;
  if (has_lefthand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->lefthand(), output);
  }
  
  // optional bool rightHand = 5;
  if (has_righthand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->righthand(), output);
  }
  
  // optional .guiprotocol.Command.FireEmitterType emitterType = 6;
  if (has_emittertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->emittertype(), output);
  }
  
  // optional float intensity = 7;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->intensity(), output);
  }
  
  // optional int32 emitterIndex = 8;
  if (has_emitterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->emitterindex(), output);
  }
  
  // repeated .guiprotocol.Player emitterEntities = 9;
  for (int i = 0; i < this->emitterentities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->emitterentities(i), output);
  }
  
  // optional float dmgPerFlame = 10;
  if (has_dmgperflame()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->dmgperflame(), output);
  }
  
  // optional int32 flameWidth = 11;
  if (has_flamewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->flamewidth(), output);
  }
  
  // optional double durationInSeconds = 12;
  if (has_durationinseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->durationinseconds(), output);
  }
  
  // optional double acceleration = 13;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->acceleration(), output);
  }
  
  // optional .guiprotocol.GameState nextState = 14;
  if (has_nextstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->nextstate(), output);
  }
  
  // optional .guiprotocol.Command.RingmasterAction ringmasterAction = 15;
  if (has_ringmasteraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->ringmasteraction(), output);
  }
  
  // optional bool unlimitedMovesOn = 16;
  if (has_unlimitedmoveson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->unlimitedmoveson(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .guiprotocol.Command.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .guiprotocol.Command.PlayerAction playerAction = 2;
  if (has_playeraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->playeraction(), target);
  }
  
  // optional .guiprotocol.Player player = 3;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->player(), target);
  }
  
  // optional bool leftHand = 4;
  if (has_lefthand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->lefthand(), target);
  }
  
  // optional bool rightHand = 5;
  if (has_righthand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->righthand(), target);
  }
  
  // optional .guiprotocol.Command.FireEmitterType emitterType = 6;
  if (has_emittertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->emittertype(), target);
  }
  
  // optional float intensity = 7;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->intensity(), target);
  }
  
  // optional int32 emitterIndex = 8;
  if (has_emitterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->emitterindex(), target);
  }
  
  // repeated .guiprotocol.Player emitterEntities = 9;
  for (int i = 0; i < this->emitterentities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->emitterentities(i), target);
  }
  
  // optional float dmgPerFlame = 10;
  if (has_dmgperflame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->dmgperflame(), target);
  }
  
  // optional int32 flameWidth = 11;
  if (has_flamewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->flamewidth(), target);
  }
  
  // optional double durationInSeconds = 12;
  if (has_durationinseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->durationinseconds(), target);
  }
  
  // optional double acceleration = 13;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->acceleration(), target);
  }
  
  // optional .guiprotocol.GameState nextState = 14;
  if (has_nextstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->nextstate(), target);
  }
  
  // optional .guiprotocol.Command.RingmasterAction ringmasterAction = 15;
  if (has_ringmasteraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->ringmasteraction(), target);
  }
  
  // optional bool unlimitedMovesOn = 16;
  if (has_unlimitedmoveson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->unlimitedmoveson(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .guiprotocol.Command.CommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .guiprotocol.Command.PlayerAction playerAction = 2;
    if (has_playeraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->playeraction());
    }
    
    // optional .guiprotocol.Player player = 3;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->player());
    }
    
    // optional bool leftHand = 4;
    if (has_lefthand()) {
      total_size += 1 + 1;
    }
    
    // optional bool rightHand = 5;
    if (has_righthand()) {
      total_size += 1 + 1;
    }
    
    // optional .guiprotocol.Command.FireEmitterType emitterType = 6;
    if (has_emittertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->emittertype());
    }
    
    // optional float intensity = 7;
    if (has_intensity()) {
      total_size += 1 + 4;
    }
    
    // optional int32 emitterIndex = 8;
    if (has_emitterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emitterindex());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional float dmgPerFlame = 10;
    if (has_dmgperflame()) {
      total_size += 1 + 4;
    }
    
    // optional int32 flameWidth = 11;
    if (has_flamewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flamewidth());
    }
    
    // optional double durationInSeconds = 12;
    if (has_durationinseconds()) {
      total_size += 1 + 8;
    }
    
    // optional double acceleration = 13;
    if (has_acceleration()) {
      total_size += 1 + 8;
    }
    
    // optional .guiprotocol.GameState nextState = 14;
    if (has_nextstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nextstate());
    }
    
    // optional .guiprotocol.Command.RingmasterAction ringmasterAction = 15;
    if (has_ringmasteraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ringmasteraction());
    }
    
    // optional bool unlimitedMovesOn = 16;
    if (has_unlimitedmoveson()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .guiprotocol.Player emitterEntities = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->emitterentities_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->emitterentities(i));
    }
    total_size += 1 * this->emitterentities_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  emitterentities_.MergeFrom(from.emitterentities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playeraction()) {
      set_playeraction(from.playeraction());
    }
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_lefthand()) {
      set_lefthand(from.lefthand());
    }
    if (from.has_righthand()) {
      set_righthand(from.righthand());
    }
    if (from.has_emittertype()) {
      set_emittertype(from.emittertype());
    }
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
    if (from.has_emitterindex()) {
      set_emitterindex(from.emitterindex());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_dmgperflame()) {
      set_dmgperflame(from.dmgperflame());
    }
    if (from.has_flamewidth()) {
      set_flamewidth(from.flamewidth());
    }
    if (from.has_durationinseconds()) {
      set_durationinseconds(from.durationinseconds());
    }
    if (from.has_acceleration()) {
      set_acceleration(from.acceleration());
    }
    if (from.has_nextstate()) {
      set_nextstate(from.nextstate());
    }
    if (from.has_ringmasteraction()) {
      set_ringmasteraction(from.ringmasteraction());
    }
    if (from.has_unlimitedmoveson()) {
      set_unlimitedmoveson(from.unlimitedmoveson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playeraction_, other->playeraction_);
    std::swap(player_, other->player_);
    std::swap(lefthand_, other->lefthand_);
    std::swap(righthand_, other->righthand_);
    std::swap(emittertype_, other->emittertype_);
    std::swap(intensity_, other->intensity_);
    std::swap(emitterindex_, other->emitterindex_);
    emitterentities_.Swap(&other->emitterentities_);
    std::swap(dmgperflame_, other->dmgperflame_);
    std::swap(flamewidth_, other->flamewidth_);
    std::swap(durationinseconds_, other->durationinseconds_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(nextstate_, other->nextstate_);
    std::swap(ringmasteraction_, other->ringmasteraction_);
    std::swap(unlimitedmoveson_, other->unlimitedmoveson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guiprotocol

// @@protoc_insertion_point(global_scope)
