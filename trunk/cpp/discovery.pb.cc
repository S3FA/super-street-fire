// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "discovery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace guiprotocol {

namespace {

const ::google::protobuf::Descriptor* DiscoveryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoveryRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DiscoveryRequest_DiscoveryAppType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DiscoveryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoveryResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_discovery_2eproto() {
  protobuf_AddDesc_discovery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "discovery.proto");
  GOOGLE_CHECK(file != NULL);
  DiscoveryRequest_descriptor_ = file->message_type(0);
  static const int DiscoveryRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryRequest, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryRequest, apptype_),
  };
  DiscoveryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscoveryRequest_descriptor_,
      DiscoveryRequest::default_instance_,
      DiscoveryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscoveryRequest));
  DiscoveryRequest_DiscoveryAppType_descriptor_ = DiscoveryRequest_descriptor_->enum_type(0);
  DiscoveryResponse_descriptor_ = file->message_type(1);
  static const int DiscoveryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryResponse, serveripaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryResponse, serverportnumber_),
  };
  DiscoveryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscoveryResponse_descriptor_,
      DiscoveryResponse::default_instance_,
      DiscoveryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscoveryResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_discovery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscoveryRequest_descriptor_, &DiscoveryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscoveryResponse_descriptor_, &DiscoveryResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_discovery_2eproto() {
  delete DiscoveryRequest::default_instance_;
  delete DiscoveryRequest_reflection_;
  delete DiscoveryResponse::default_instance_;
  delete DiscoveryResponse_reflection_;
}

void protobuf_AddDesc_discovery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017discovery.proto\022\013guiprotocol\"\201\001\n\020Disco"
    "veryRequest\022\017\n\007appName\030\002 \001(\t\022\?\n\007appType\030"
    "\003 \001(\0162..guiprotocol.DiscoveryRequest.Dis"
    "coveryAppType\"\033\n\020DiscoveryAppType\022\007\n\003GUI"
    "\020\000\"F\n\021DiscoveryResponse\022\027\n\017serverIPAddre"
    "ss\030\001 \002(\t\022\030\n\020serverPortNumber\030\002 \002(\005B\032\n\030ca"
    ".site3.ssf.guiprotocol", 262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "discovery.proto", &protobuf_RegisterTypes);
  DiscoveryRequest::default_instance_ = new DiscoveryRequest();
  DiscoveryResponse::default_instance_ = new DiscoveryResponse();
  DiscoveryRequest::default_instance_->InitAsDefaultInstance();
  DiscoveryResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_discovery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_discovery_2eproto {
  StaticDescriptorInitializer_discovery_2eproto() {
    protobuf_AddDesc_discovery_2eproto();
  }
} static_descriptor_initializer_discovery_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* DiscoveryRequest_DiscoveryAppType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryRequest_DiscoveryAppType_descriptor_;
}
bool DiscoveryRequest_DiscoveryAppType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DiscoveryRequest_DiscoveryAppType DiscoveryRequest::GUI;
const DiscoveryRequest_DiscoveryAppType DiscoveryRequest::DiscoveryAppType_MIN;
const DiscoveryRequest_DiscoveryAppType DiscoveryRequest::DiscoveryAppType_MAX;
const int DiscoveryRequest::DiscoveryAppType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DiscoveryRequest::kAppNameFieldNumber;
const int DiscoveryRequest::kAppTypeFieldNumber;
#endif  // !_MSC_VER

DiscoveryRequest::DiscoveryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiscoveryRequest::InitAsDefaultInstance() {
}

DiscoveryRequest::DiscoveryRequest(const DiscoveryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiscoveryRequest::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscoveryRequest::~DiscoveryRequest() {
  SharedDtor();
}

void DiscoveryRequest::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (this != default_instance_) {
  }
}

void DiscoveryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryRequest_descriptor_;
}

const DiscoveryRequest& DiscoveryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_discovery_2eproto();  return *default_instance_;
}

DiscoveryRequest* DiscoveryRequest::default_instance_ = NULL;

DiscoveryRequest* DiscoveryRequest::New() const {
  return new DiscoveryRequest;
}

void DiscoveryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    apptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscoveryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appType;
        break;
      }
      
      // optional .guiprotocol.DiscoveryRequest.DiscoveryAppType appType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::guiprotocol::DiscoveryRequest_DiscoveryAppType_IsValid(value)) {
            set_apptype(static_cast< ::guiprotocol::DiscoveryRequest_DiscoveryAppType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiscoveryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string appName = 2;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->appname(), output);
  }
  
  // optional .guiprotocol.DiscoveryRequest.DiscoveryAppType appType = 3;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->apptype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiscoveryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string appName = 2;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appname(), target);
  }
  
  // optional .guiprotocol.DiscoveryRequest.DiscoveryAppType appType = 3;
  if (has_apptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->apptype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiscoveryRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string appName = 2;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }
    
    // optional .guiprotocol.DiscoveryRequest.DiscoveryAppType appType = 3;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apptype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscoveryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscoveryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscoveryRequest::MergeFrom(const DiscoveryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscoveryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryRequest::CopyFrom(const DiscoveryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryRequest::IsInitialized() const {
  
  return true;
}

void DiscoveryRequest::Swap(DiscoveryRequest* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscoveryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoveryRequest_descriptor_;
  metadata.reflection = DiscoveryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscoveryResponse::kServerIPAddressFieldNumber;
const int DiscoveryResponse::kServerPortNumberFieldNumber;
#endif  // !_MSC_VER

DiscoveryResponse::DiscoveryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiscoveryResponse::InitAsDefaultInstance() {
}

DiscoveryResponse::DiscoveryResponse(const DiscoveryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiscoveryResponse::SharedCtor() {
  _cached_size_ = 0;
  serveripaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverportnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscoveryResponse::~DiscoveryResponse() {
  SharedDtor();
}

void DiscoveryResponse::SharedDtor() {
  if (serveripaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete serveripaddress_;
  }
  if (this != default_instance_) {
  }
}

void DiscoveryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryResponse_descriptor_;
}

const DiscoveryResponse& DiscoveryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_discovery_2eproto();  return *default_instance_;
}

DiscoveryResponse* DiscoveryResponse::default_instance_ = NULL;

DiscoveryResponse* DiscoveryResponse::New() const {
  return new DiscoveryResponse;
}

void DiscoveryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serveripaddress()) {
      if (serveripaddress_ != &::google::protobuf::internal::kEmptyString) {
        serveripaddress_->clear();
      }
    }
    serverportnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscoveryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serverIPAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serveripaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serveripaddress().data(), this->serveripaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverPortNumber;
        break;
      }
      
      // required int32 serverPortNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverPortNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverportnumber_)));
          set_has_serverportnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiscoveryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string serverIPAddress = 1;
  if (has_serveripaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serveripaddress().data(), this->serveripaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->serveripaddress(), output);
  }
  
  // required int32 serverPortNumber = 2;
  if (has_serverportnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverportnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiscoveryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string serverIPAddress = 1;
  if (has_serveripaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serveripaddress().data(), this->serveripaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serveripaddress(), target);
  }
  
  // required int32 serverPortNumber = 2;
  if (has_serverportnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverportnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiscoveryResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string serverIPAddress = 1;
    if (has_serveripaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serveripaddress());
    }
    
    // required int32 serverPortNumber = 2;
    if (has_serverportnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverportnumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscoveryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscoveryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscoveryResponse::MergeFrom(const DiscoveryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serveripaddress()) {
      set_serveripaddress(from.serveripaddress());
    }
    if (from.has_serverportnumber()) {
      set_serverportnumber(from.serverportnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscoveryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryResponse::CopyFrom(const DiscoveryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DiscoveryResponse::Swap(DiscoveryResponse* other) {
  if (other != this) {
    std::swap(serveripaddress_, other->serveripaddress_);
    std::swap(serverportnumber_, other->serverportnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscoveryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoveryResponse_descriptor_;
  metadata.reflection = DiscoveryResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guiprotocol

// @@protoc_insertion_point(global_scope)
