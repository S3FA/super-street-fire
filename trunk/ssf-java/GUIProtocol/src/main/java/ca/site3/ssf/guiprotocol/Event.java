// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

package ca.site3.ssf.guiprotocol;

public final class Event {
  private Event() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GameEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .guiprotocol.GameEvent.EventType type = 1;
    boolean hasType();
    ca.site3.ssf.guiprotocol.Event.GameEvent.EventType getType();
    
    // optional .guiprotocol.GameEvent.FireEmitter emitter = 2;
    boolean hasEmitter();
    ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter getEmitter();
    ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterOrBuilder getEmitterOrBuilder();
    
    // optional .guiprotocol.GameState oldGameState = 3;
    boolean hasOldGameState();
    ca.site3.ssf.guiprotocol.Common.GameState getOldGameState();
    
    // optional .guiprotocol.GameState newGameState = 4;
    boolean hasNewGameState();
    ca.site3.ssf.guiprotocol.Common.GameState getNewGameState();
    
    // optional .guiprotocol.GameEvent.MatchResult matchResult = 5;
    boolean hasMatchResult();
    ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult getMatchResult();
    
    // optional .guiprotocol.GameEvent.Player player = 6;
    boolean hasPlayer();
    ca.site3.ssf.guiprotocol.Event.GameEvent.Player getPlayer();
    
    // optional .guiprotocol.GameEvent.AttackType attackType = 7;
    boolean hasAttackType();
    ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType getAttackType();
    
    // optional float oldHealth = 9;
    boolean hasOldHealth();
    float getOldHealth();
    
    // optional float newHealth = 10;
    boolean hasNewHealth();
    float getNewHealth();
    
    // optional int32 roundNumber = 11;
    boolean hasRoundNumber();
    int getRoundNumber();
    
    // optional .guiprotocol.GameEvent.RoundBeginCountdownTime roundBeginTimer = 12;
    boolean hasRoundBeginTimer();
    ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime getRoundBeginTimer();
    
    // optional .guiprotocol.GameEvent.RoundResult roundResult = 13;
    boolean hasRoundResult();
    ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult getRoundResult();
    
    // optional bool timedOut = 14;
    boolean hasTimedOut();
    boolean getTimedOut();
    
    // optional int32 timeInSecs = 15;
    boolean hasTimeInSecs();
    int getTimeInSecs();
    
    // optional .guiprotocol.GameState gameState = 16;
    boolean hasGameState();
    ca.site3.ssf.guiprotocol.Common.GameState getGameState();
    
    // repeated .guiprotocol.GameEvent.RoundResult roundResults = 17;
    java.util.List<ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult> getRoundResultsList();
    int getRoundResultsCount();
    ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult getRoundResults(int index);
    
    // optional float player1Health = 18;
    boolean hasPlayer1Health();
    float getPlayer1Health();
    
    // optional float player2Health = 19;
    boolean hasPlayer2Health();
    float getPlayer2Health();
    
    // optional int32 roundInPlayTimer = 20;
    boolean hasRoundInPlayTimer();
    int getRoundInPlayTimer();
    
    // optional .guiprotocol.GameEvent.RingmasterActionType ringmasterActionType = 21;
    boolean hasRingmasterActionType();
    ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType getRingmasterActionType();
  }
  public static final class GameEvent extends
      com.google.protobuf.GeneratedMessage
      implements GameEventOrBuilder {
    // Use GameEvent.newBuilder() to construct.
    private GameEvent(Builder builder) {
      super(builder);
    }
    private GameEvent(boolean noInit) {}
    
    private static final GameEvent defaultInstance;
    public static GameEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ca.site3.ssf.guiprotocol.Event.internal_static_guiprotocol_GameEvent_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ca.site3.ssf.guiprotocol.Event.internal_static_guiprotocol_GameEvent_fieldAccessorTable;
    }
    
    public enum EventType
        implements com.google.protobuf.ProtocolMessageEnum {
      GAME_INFO_REFRESH(0, 0),
      FIRE_EMITTER_CHANGED(1, 1),
      GAME_STATE_CHANGED(2, 2),
      PLAYER_HEALTH_CHANGED(3, 3),
      ROUND_PLAY_TIMER_CHANGED(4, 4),
      ROUND_BEGIN_TIMER_CHANGED(5, 5),
      ROUND_ENDED(6, 6),
      MATCH_ENDED(7, 7),
      PLAYER_ATTACK_ACTION(8, 8),
      PLAYER_BLOCK_ACTION(9, 9),
      RINGMASTER_ACTION(10, 10),
      SYSTEM_INFO_REFRESH(11, 11),
      ;
      
      public static final int GAME_INFO_REFRESH_VALUE = 0;
      public static final int FIRE_EMITTER_CHANGED_VALUE = 1;
      public static final int GAME_STATE_CHANGED_VALUE = 2;
      public static final int PLAYER_HEALTH_CHANGED_VALUE = 3;
      public static final int ROUND_PLAY_TIMER_CHANGED_VALUE = 4;
      public static final int ROUND_BEGIN_TIMER_CHANGED_VALUE = 5;
      public static final int ROUND_ENDED_VALUE = 6;
      public static final int MATCH_ENDED_VALUE = 7;
      public static final int PLAYER_ATTACK_ACTION_VALUE = 8;
      public static final int PLAYER_BLOCK_ACTION_VALUE = 9;
      public static final int RINGMASTER_ACTION_VALUE = 10;
      public static final int SYSTEM_INFO_REFRESH_VALUE = 11;
      
      
      public final int getNumber() { return value; }
      
      public static EventType valueOf(int value) {
        switch (value) {
          case 0: return GAME_INFO_REFRESH;
          case 1: return FIRE_EMITTER_CHANGED;
          case 2: return GAME_STATE_CHANGED;
          case 3: return PLAYER_HEALTH_CHANGED;
          case 4: return ROUND_PLAY_TIMER_CHANGED;
          case 5: return ROUND_BEGIN_TIMER_CHANGED;
          case 6: return ROUND_ENDED;
          case 7: return MATCH_ENDED;
          case 8: return PLAYER_ATTACK_ACTION;
          case 9: return PLAYER_BLOCK_ACTION;
          case 10: return RINGMASTER_ACTION;
          case 11: return SYSTEM_INFO_REFRESH;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<EventType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<EventType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<EventType>() {
              public EventType findValueByNumber(int number) {
                return EventType.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final EventType[] VALUES = {
        GAME_INFO_REFRESH, FIRE_EMITTER_CHANGED, GAME_STATE_CHANGED, PLAYER_HEALTH_CHANGED, ROUND_PLAY_TIMER_CHANGED, ROUND_BEGIN_TIMER_CHANGED, ROUND_ENDED, MATCH_ENDED, PLAYER_ATTACK_ACTION, PLAYER_BLOCK_ACTION, RINGMASTER_ACTION, SYSTEM_INFO_REFRESH, 
      };
      
      public static EventType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private EventType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:guiprotocol.GameEvent.EventType)
    }
    
    public enum Player
        implements com.google.protobuf.ProtocolMessageEnum {
      RINGMASTER(0, 0),
      P1(1, 1),
      P2(2, 2),
      ;
      
      public static final int RINGMASTER_VALUE = 0;
      public static final int P1_VALUE = 1;
      public static final int P2_VALUE = 2;
      
      
      public final int getNumber() { return value; }
      
      public static Player valueOf(int value) {
        switch (value) {
          case 0: return RINGMASTER;
          case 1: return P1;
          case 2: return P2;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<Player>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Player>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Player>() {
              public Player findValueByNumber(int number) {
                return Player.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor().getEnumTypes().get(1);
      }
      
      private static final Player[] VALUES = {
        RINGMASTER, P1, P2, 
      };
      
      public static Player valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private Player(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:guiprotocol.GameEvent.Player)
    }
    
    public enum RoundResult
        implements com.google.protobuf.ProtocolMessageEnum {
      ROUND_TIE(0, 0),
      PLAYER_1_ROUND_WIN(1, 1),
      PLAYER_2_ROUND_WIN(2, 2),
      ;
      
      public static final int ROUND_TIE_VALUE = 0;
      public static final int PLAYER_1_ROUND_WIN_VALUE = 1;
      public static final int PLAYER_2_ROUND_WIN_VALUE = 2;
      
      
      public final int getNumber() { return value; }
      
      public static RoundResult valueOf(int value) {
        switch (value) {
          case 0: return ROUND_TIE;
          case 1: return PLAYER_1_ROUND_WIN;
          case 2: return PLAYER_2_ROUND_WIN;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<RoundResult>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RoundResult>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RoundResult>() {
              public RoundResult findValueByNumber(int number) {
                return RoundResult.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor().getEnumTypes().get(2);
      }
      
      private static final RoundResult[] VALUES = {
        ROUND_TIE, PLAYER_1_ROUND_WIN, PLAYER_2_ROUND_WIN, 
      };
      
      public static RoundResult valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private RoundResult(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:guiprotocol.GameEvent.RoundResult)
    }
    
    public enum MatchResult
        implements com.google.protobuf.ProtocolMessageEnum {
      PLAYER_1_MATCH_WIN(0, 0),
      PLAYER_2_MATCH_WIN(1, 1),
      ;
      
      public static final int PLAYER_1_MATCH_WIN_VALUE = 0;
      public static final int PLAYER_2_MATCH_WIN_VALUE = 1;
      
      
      public final int getNumber() { return value; }
      
      public static MatchResult valueOf(int value) {
        switch (value) {
          case 0: return PLAYER_1_MATCH_WIN;
          case 1: return PLAYER_2_MATCH_WIN;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<MatchResult>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MatchResult>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MatchResult>() {
              public MatchResult findValueByNumber(int number) {
                return MatchResult.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor().getEnumTypes().get(3);
      }
      
      private static final MatchResult[] VALUES = {
        PLAYER_1_MATCH_WIN, PLAYER_2_MATCH_WIN, 
      };
      
      public static MatchResult valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private MatchResult(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:guiprotocol.GameEvent.MatchResult)
    }
    
    public enum FireEmitterType
        implements com.google.protobuf.ProtocolMessageEnum {
      LEFT_RAIL(0, 0),
      RIGHT_RAIL(1, 1),
      OUTER_RING(2, 2),
      ;
      
      public static final int LEFT_RAIL_VALUE = 0;
      public static final int RIGHT_RAIL_VALUE = 1;
      public static final int OUTER_RING_VALUE = 2;
      
      
      public final int getNumber() { return value; }
      
      public static FireEmitterType valueOf(int value) {
        switch (value) {
          case 0: return LEFT_RAIL;
          case 1: return RIGHT_RAIL;
          case 2: return OUTER_RING;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<FireEmitterType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FireEmitterType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FireEmitterType>() {
              public FireEmitterType findValueByNumber(int number) {
                return FireEmitterType.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor().getEnumTypes().get(4);
      }
      
      private static final FireEmitterType[] VALUES = {
        LEFT_RAIL, RIGHT_RAIL, OUTER_RING, 
      };
      
      public static FireEmitterType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private FireEmitterType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:guiprotocol.GameEvent.FireEmitterType)
    }
    
    public enum FlameEmitterType
        implements com.google.protobuf.ProtocolMessageEnum {
      ATTACK_FLAME(0, 0),
      BLOCK_FLAME(1, 1),
      NON_GAME_FLAME(2, 2),
      ;
      
      public static final int ATTACK_FLAME_VALUE = 0;
      public static final int BLOCK_FLAME_VALUE = 1;
      public static final int NON_GAME_FLAME_VALUE = 2;
      
      
      public final int getNumber() { return value; }
      
      public static FlameEmitterType valueOf(int value) {
        switch (value) {
          case 0: return ATTACK_FLAME;
          case 1: return BLOCK_FLAME;
          case 2: return NON_GAME_FLAME;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<FlameEmitterType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FlameEmitterType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FlameEmitterType>() {
              public FlameEmitterType findValueByNumber(int number) {
                return FlameEmitterType.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor().getEnumTypes().get(5);
      }
      
      private static final FlameEmitterType[] VALUES = {
        ATTACK_FLAME, BLOCK_FLAME, NON_GAME_FLAME, 
      };
      
      public static FlameEmitterType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private FlameEmitterType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:guiprotocol.GameEvent.FlameEmitterType)
    }
    
    public enum AttackType
        implements com.google.protobuf.ProtocolMessageEnum {
      CUSTOM_UNDEFINED(0, 0),
      LEFT_JAB(1, 1),
      RIGHT_JAB(2, 2),
      LEFT_HOOK(3, 3),
      RIGHT_HOOK(4, 4),
      LEFT_UPPERCUT(5, 5),
      RIGHT_UPPERCUT(6, 6),
      LEFT_CHOP(7, 7),
      RIGHT_CHOP(8, 8),
      HADOUKEN(9, 9),
      SONIC_BOOM(10, 10),
      LEFT_SHORYUKEN_ATTACK(11, 11),
      RIGHT_SHORYUKEN_ATTACK(12, 12),
      DOUBLE_LARIAT_ATTACK(13, 13),
      QUADRUPLE_LARIAT_ATTACK(14, 14),
      SUMO_HEADBUTT_ATTACK(15, 15),
      LEFT_ONE_HUNDRED_HAND_SLAP_ATTACK(16, 16),
      RIGHT_ONE_HUNDRED_HAND_SLAP_ATTACK(17, 17),
      TWO_HANDED_ONE_HUNDRED_HAND_SLAP_ATTACK(18, 18),
      PSYCHO_CRUSHER_ATTACK(19, 19),
      YMCA_ATTACK(20, 20),
      NYAN_CAT_ATTACK(21, 21),
      DISCO_STU_ATTACK(22, 22),
      ARM_WINDMILL_ATTACK(23, 23),
      SUCK_IT_ATTACK(24, 24),
      LEFT_VAFANAPOLI_ATTACK(25, 25),
      RIGHT_VAFANAPOLI_ATTACK(26, 26),
      ;
      
      public static final int CUSTOM_UNDEFINED_VALUE = 0;
      public static final int LEFT_JAB_VALUE = 1;
      public static final int RIGHT_JAB_VALUE = 2;
      public static final int LEFT_HOOK_VALUE = 3;
      public static final int RIGHT_HOOK_VALUE = 4;
      public static final int LEFT_UPPERCUT_VALUE = 5;
      public static final int RIGHT_UPPERCUT_VALUE = 6;
      public static final int LEFT_CHOP_VALUE = 7;
      public static final int RIGHT_CHOP_VALUE = 8;
      public static final int HADOUKEN_VALUE = 9;
      public static final int SONIC_BOOM_VALUE = 10;
      public static final int LEFT_SHORYUKEN_ATTACK_VALUE = 11;
      public static final int RIGHT_SHORYUKEN_ATTACK_VALUE = 12;
      public static final int DOUBLE_LARIAT_ATTACK_VALUE = 13;
      public static final int QUADRUPLE_LARIAT_ATTACK_VALUE = 14;
      public static final int SUMO_HEADBUTT_ATTACK_VALUE = 15;
      public static final int LEFT_ONE_HUNDRED_HAND_SLAP_ATTACK_VALUE = 16;
      public static final int RIGHT_ONE_HUNDRED_HAND_SLAP_ATTACK_VALUE = 17;
      public static final int TWO_HANDED_ONE_HUNDRED_HAND_SLAP_ATTACK_VALUE = 18;
      public static final int PSYCHO_CRUSHER_ATTACK_VALUE = 19;
      public static final int YMCA_ATTACK_VALUE = 20;
      public static final int NYAN_CAT_ATTACK_VALUE = 21;
      public static final int DISCO_STU_ATTACK_VALUE = 22;
      public static final int ARM_WINDMILL_ATTACK_VALUE = 23;
      public static final int SUCK_IT_ATTACK_VALUE = 24;
      public static final int LEFT_VAFANAPOLI_ATTACK_VALUE = 25;
      public static final int RIGHT_VAFANAPOLI_ATTACK_VALUE = 26;
      
      
      public final int getNumber() { return value; }
      
      public static AttackType valueOf(int value) {
        switch (value) {
          case 0: return CUSTOM_UNDEFINED;
          case 1: return LEFT_JAB;
          case 2: return RIGHT_JAB;
          case 3: return LEFT_HOOK;
          case 4: return RIGHT_HOOK;
          case 5: return LEFT_UPPERCUT;
          case 6: return RIGHT_UPPERCUT;
          case 7: return LEFT_CHOP;
          case 8: return RIGHT_CHOP;
          case 9: return HADOUKEN;
          case 10: return SONIC_BOOM;
          case 11: return LEFT_SHORYUKEN_ATTACK;
          case 12: return RIGHT_SHORYUKEN_ATTACK;
          case 13: return DOUBLE_LARIAT_ATTACK;
          case 14: return QUADRUPLE_LARIAT_ATTACK;
          case 15: return SUMO_HEADBUTT_ATTACK;
          case 16: return LEFT_ONE_HUNDRED_HAND_SLAP_ATTACK;
          case 17: return RIGHT_ONE_HUNDRED_HAND_SLAP_ATTACK;
          case 18: return TWO_HANDED_ONE_HUNDRED_HAND_SLAP_ATTACK;
          case 19: return PSYCHO_CRUSHER_ATTACK;
          case 20: return YMCA_ATTACK;
          case 21: return NYAN_CAT_ATTACK;
          case 22: return DISCO_STU_ATTACK;
          case 23: return ARM_WINDMILL_ATTACK;
          case 24: return SUCK_IT_ATTACK;
          case 25: return LEFT_VAFANAPOLI_ATTACK;
          case 26: return RIGHT_VAFANAPOLI_ATTACK;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<AttackType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<AttackType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AttackType>() {
              public AttackType findValueByNumber(int number) {
                return AttackType.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor().getEnumTypes().get(6);
      }
      
      private static final AttackType[] VALUES = {
        CUSTOM_UNDEFINED, LEFT_JAB, RIGHT_JAB, LEFT_HOOK, RIGHT_HOOK, LEFT_UPPERCUT, RIGHT_UPPERCUT, LEFT_CHOP, RIGHT_CHOP, HADOUKEN, SONIC_BOOM, LEFT_SHORYUKEN_ATTACK, RIGHT_SHORYUKEN_ATTACK, DOUBLE_LARIAT_ATTACK, QUADRUPLE_LARIAT_ATTACK, SUMO_HEADBUTT_ATTACK, LEFT_ONE_HUNDRED_HAND_SLAP_ATTACK, RIGHT_ONE_HUNDRED_HAND_SLAP_ATTACK, TWO_HANDED_ONE_HUNDRED_HAND_SLAP_ATTACK, PSYCHO_CRUSHER_ATTACK, YMCA_ATTACK, NYAN_CAT_ATTACK, DISCO_STU_ATTACK, ARM_WINDMILL_ATTACK, SUCK_IT_ATTACK, LEFT_VAFANAPOLI_ATTACK, RIGHT_VAFANAPOLI_ATTACK, 
      };
      
      public static AttackType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private AttackType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:guiprotocol.GameEvent.AttackType)
    }
    
    public enum RingmasterActionType
        implements com.google.protobuf.ProtocolMessageEnum {
      LEFT_HALF_RING_ACTION(0, 0),
      RIGHT_HALF_RING_ACTION(1, 1),
      LEFT_JAB_ACTION(2, 2),
      RIGHT_JAB_ACTION(3, 3),
      ERUPTION_ACTION(4, 4),
      LEFT_CIRCLE_ACTION(5, 5),
      RIGHT_CIRCLE_ACTION(6, 6),
      HADOUKEN_ACTION(7, 7),
      DRUM_ACTION(8, 8),
      ;
      
      public static final int LEFT_HALF_RING_ACTION_VALUE = 0;
      public static final int RIGHT_HALF_RING_ACTION_VALUE = 1;
      public static final int LEFT_JAB_ACTION_VALUE = 2;
      public static final int RIGHT_JAB_ACTION_VALUE = 3;
      public static final int ERUPTION_ACTION_VALUE = 4;
      public static final int LEFT_CIRCLE_ACTION_VALUE = 5;
      public static final int RIGHT_CIRCLE_ACTION_VALUE = 6;
      public static final int HADOUKEN_ACTION_VALUE = 7;
      public static final int DRUM_ACTION_VALUE = 8;
      
      
      public final int getNumber() { return value; }
      
      public static RingmasterActionType valueOf(int value) {
        switch (value) {
          case 0: return LEFT_HALF_RING_ACTION;
          case 1: return RIGHT_HALF_RING_ACTION;
          case 2: return LEFT_JAB_ACTION;
          case 3: return RIGHT_JAB_ACTION;
          case 4: return ERUPTION_ACTION;
          case 5: return LEFT_CIRCLE_ACTION;
          case 6: return RIGHT_CIRCLE_ACTION;
          case 7: return HADOUKEN_ACTION;
          case 8: return DRUM_ACTION;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<RingmasterActionType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RingmasterActionType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RingmasterActionType>() {
              public RingmasterActionType findValueByNumber(int number) {
                return RingmasterActionType.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor().getEnumTypes().get(7);
      }
      
      private static final RingmasterActionType[] VALUES = {
        LEFT_HALF_RING_ACTION, RIGHT_HALF_RING_ACTION, LEFT_JAB_ACTION, RIGHT_JAB_ACTION, ERUPTION_ACTION, LEFT_CIRCLE_ACTION, RIGHT_CIRCLE_ACTION, HADOUKEN_ACTION, DRUM_ACTION, 
      };
      
      public static RingmasterActionType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private RingmasterActionType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:guiprotocol.GameEvent.RingmasterActionType)
    }
    
    public enum RoundBeginCountdownTime
        implements com.google.protobuf.ProtocolMessageEnum {
      THREE(0, 0),
      TWO(1, 1),
      ONE(2, 2),
      FIGHT(3, 3),
      ;
      
      public static final int THREE_VALUE = 0;
      public static final int TWO_VALUE = 1;
      public static final int ONE_VALUE = 2;
      public static final int FIGHT_VALUE = 3;
      
      
      public final int getNumber() { return value; }
      
      public static RoundBeginCountdownTime valueOf(int value) {
        switch (value) {
          case 0: return THREE;
          case 1: return TWO;
          case 2: return ONE;
          case 3: return FIGHT;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<RoundBeginCountdownTime>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RoundBeginCountdownTime>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RoundBeginCountdownTime>() {
              public RoundBeginCountdownTime findValueByNumber(int number) {
                return RoundBeginCountdownTime.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor().getEnumTypes().get(8);
      }
      
      private static final RoundBeginCountdownTime[] VALUES = {
        THREE, TWO, ONE, FIGHT, 
      };
      
      public static RoundBeginCountdownTime valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private RoundBeginCountdownTime(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:guiprotocol.GameEvent.RoundBeginCountdownTime)
    }
    
    public interface FireEmitterOrBuilder
        extends com.google.protobuf.MessageOrBuilder {
      
      // required int32 emitterIndex = 1;
      boolean hasEmitterIndex();
      int getEmitterIndex();
      
      // required .guiprotocol.GameEvent.FireEmitterType emitterType = 2;
      boolean hasEmitterType();
      ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType getEmitterType();
      
      // required float intensityRingmaster = 3;
      boolean hasIntensityRingmaster();
      float getIntensityRingmaster();
      
      // required float intensityPlayer1 = 4;
      boolean hasIntensityPlayer1();
      float getIntensityPlayer1();
      
      // required float intensityPlayer2 = 5;
      boolean hasIntensityPlayer2();
      float getIntensityPlayer2();
    }
    public static final class FireEmitter extends
        com.google.protobuf.GeneratedMessage
        implements FireEmitterOrBuilder {
      // Use FireEmitter.newBuilder() to construct.
      private FireEmitter(Builder builder) {
        super(builder);
      }
      private FireEmitter(boolean noInit) {}
      
      private static final FireEmitter defaultInstance;
      public static FireEmitter getDefaultInstance() {
        return defaultInstance;
      }
      
      public FireEmitter getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.internal_static_guiprotocol_GameEvent_FireEmitter_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ca.site3.ssf.guiprotocol.Event.internal_static_guiprotocol_GameEvent_FireEmitter_fieldAccessorTable;
      }
      
      private int bitField0_;
      // required int32 emitterIndex = 1;
      public static final int EMITTERINDEX_FIELD_NUMBER = 1;
      private int emitterIndex_;
      public boolean hasEmitterIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getEmitterIndex() {
        return emitterIndex_;
      }
      
      // required .guiprotocol.GameEvent.FireEmitterType emitterType = 2;
      public static final int EMITTERTYPE_FIELD_NUMBER = 2;
      private ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType emitterType_;
      public boolean hasEmitterType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType getEmitterType() {
        return emitterType_;
      }
      
      // required float intensityRingmaster = 3;
      public static final int INTENSITYRINGMASTER_FIELD_NUMBER = 3;
      private float intensityRingmaster_;
      public boolean hasIntensityRingmaster() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public float getIntensityRingmaster() {
        return intensityRingmaster_;
      }
      
      // required float intensityPlayer1 = 4;
      public static final int INTENSITYPLAYER1_FIELD_NUMBER = 4;
      private float intensityPlayer1_;
      public boolean hasIntensityPlayer1() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public float getIntensityPlayer1() {
        return intensityPlayer1_;
      }
      
      // required float intensityPlayer2 = 5;
      public static final int INTENSITYPLAYER2_FIELD_NUMBER = 5;
      private float intensityPlayer2_;
      public boolean hasIntensityPlayer2() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public float getIntensityPlayer2() {
        return intensityPlayer2_;
      }
      
      private void initFields() {
        emitterIndex_ = 0;
        emitterType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType.LEFT_RAIL;
        intensityRingmaster_ = 0F;
        intensityPlayer1_ = 0F;
        intensityPlayer2_ = 0F;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;
        
        if (!hasEmitterIndex()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasEmitterType()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasIntensityRingmaster()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasIntensityPlayer1()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasIntensityPlayer2()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, emitterIndex_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(2, emitterType_.getNumber());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeFloat(3, intensityRingmaster_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeFloat(4, intensityPlayer1_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeFloat(5, intensityPlayer2_);
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, emitterIndex_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(2, emitterType_.getNumber());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, intensityRingmaster_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, intensityPlayer1_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(5, intensityPlayer2_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }
      
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ca.site3.ssf.guiprotocol.Event.internal_static_guiprotocol_GameEvent_FireEmitter_descriptor;
        }
        
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ca.site3.ssf.guiprotocol.Event.internal_static_guiprotocol_GameEvent_FireEmitter_fieldAccessorTable;
        }
        
        // Construct using ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }
        
        private Builder(BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }
        
        public Builder clear() {
          super.clear();
          emitterIndex_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          emitterType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType.LEFT_RAIL;
          bitField0_ = (bitField0_ & ~0x00000002);
          intensityRingmaster_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000004);
          intensityPlayer1_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000008);
          intensityPlayer2_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.getDescriptor();
        }
        
        public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter getDefaultInstanceForType() {
          return ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.getDefaultInstance();
        }
        
        public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter build() {
          ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }
        
        private ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return result;
        }
        
        public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter buildPartial() {
          ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter result = new ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.emitterIndex_ = emitterIndex_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.emitterType_ = emitterType_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.intensityRingmaster_ = intensityRingmaster_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.intensityPlayer1_ = intensityPlayer1_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.intensityPlayer2_ = intensityPlayer2_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter) {
            return mergeFrom((ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter other) {
          if (other == ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.getDefaultInstance()) return this;
          if (other.hasEmitterIndex()) {
            setEmitterIndex(other.getEmitterIndex());
          }
          if (other.hasEmitterType()) {
            setEmitterType(other.getEmitterType());
          }
          if (other.hasIntensityRingmaster()) {
            setIntensityRingmaster(other.getIntensityRingmaster());
          }
          if (other.hasIntensityPlayer1()) {
            setIntensityPlayer1(other.getIntensityPlayer1());
          }
          if (other.hasIntensityPlayer2()) {
            setIntensityPlayer2(other.getIntensityPlayer2());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public final boolean isInitialized() {
          if (!hasEmitterIndex()) {
            
            return false;
          }
          if (!hasEmitterType()) {
            
            return false;
          }
          if (!hasIntensityRingmaster()) {
            
            return false;
          }
          if (!hasIntensityPlayer1()) {
            
            return false;
          }
          if (!hasIntensityPlayer2()) {
            
            return false;
          }
          return true;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  onChanged();
                  return this;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                emitterIndex_ = input.readInt32();
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType value = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  emitterType_ = value;
                }
                break;
              }
              case 29: {
                bitField0_ |= 0x00000004;
                intensityRingmaster_ = input.readFloat();
                break;
              }
              case 37: {
                bitField0_ |= 0x00000008;
                intensityPlayer1_ = input.readFloat();
                break;
              }
              case 45: {
                bitField0_ |= 0x00000010;
                intensityPlayer2_ = input.readFloat();
                break;
              }
            }
          }
        }
        
        private int bitField0_;
        
        // required int32 emitterIndex = 1;
        private int emitterIndex_ ;
        public boolean hasEmitterIndex() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        public int getEmitterIndex() {
          return emitterIndex_;
        }
        public Builder setEmitterIndex(int value) {
          bitField0_ |= 0x00000001;
          emitterIndex_ = value;
          onChanged();
          return this;
        }
        public Builder clearEmitterIndex() {
          bitField0_ = (bitField0_ & ~0x00000001);
          emitterIndex_ = 0;
          onChanged();
          return this;
        }
        
        // required .guiprotocol.GameEvent.FireEmitterType emitterType = 2;
        private ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType emitterType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType.LEFT_RAIL;
        public boolean hasEmitterType() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType getEmitterType() {
          return emitterType_;
        }
        public Builder setEmitterType(ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          emitterType_ = value;
          onChanged();
          return this;
        }
        public Builder clearEmitterType() {
          bitField0_ = (bitField0_ & ~0x00000002);
          emitterType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterType.LEFT_RAIL;
          onChanged();
          return this;
        }
        
        // required float intensityRingmaster = 3;
        private float intensityRingmaster_ ;
        public boolean hasIntensityRingmaster() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        public float getIntensityRingmaster() {
          return intensityRingmaster_;
        }
        public Builder setIntensityRingmaster(float value) {
          bitField0_ |= 0x00000004;
          intensityRingmaster_ = value;
          onChanged();
          return this;
        }
        public Builder clearIntensityRingmaster() {
          bitField0_ = (bitField0_ & ~0x00000004);
          intensityRingmaster_ = 0F;
          onChanged();
          return this;
        }
        
        // required float intensityPlayer1 = 4;
        private float intensityPlayer1_ ;
        public boolean hasIntensityPlayer1() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        public float getIntensityPlayer1() {
          return intensityPlayer1_;
        }
        public Builder setIntensityPlayer1(float value) {
          bitField0_ |= 0x00000008;
          intensityPlayer1_ = value;
          onChanged();
          return this;
        }
        public Builder clearIntensityPlayer1() {
          bitField0_ = (bitField0_ & ~0x00000008);
          intensityPlayer1_ = 0F;
          onChanged();
          return this;
        }
        
        // required float intensityPlayer2 = 5;
        private float intensityPlayer2_ ;
        public boolean hasIntensityPlayer2() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        public float getIntensityPlayer2() {
          return intensityPlayer2_;
        }
        public Builder setIntensityPlayer2(float value) {
          bitField0_ |= 0x00000010;
          intensityPlayer2_ = value;
          onChanged();
          return this;
        }
        public Builder clearIntensityPlayer2() {
          bitField0_ = (bitField0_ & ~0x00000010);
          intensityPlayer2_ = 0F;
          onChanged();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:guiprotocol.GameEvent.FireEmitter)
      }
      
      static {
        defaultInstance = new FireEmitter(true);
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:guiprotocol.GameEvent.FireEmitter)
    }
    
    private int bitField0_;
    // required .guiprotocol.GameEvent.EventType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private ca.site3.ssf.guiprotocol.Event.GameEvent.EventType type_;
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.EventType getType() {
      return type_;
    }
    
    // optional .guiprotocol.GameEvent.FireEmitter emitter = 2;
    public static final int EMITTER_FIELD_NUMBER = 2;
    private ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter emitter_;
    public boolean hasEmitter() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter getEmitter() {
      return emitter_;
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterOrBuilder getEmitterOrBuilder() {
      return emitter_;
    }
    
    // optional .guiprotocol.GameState oldGameState = 3;
    public static final int OLDGAMESTATE_FIELD_NUMBER = 3;
    private ca.site3.ssf.guiprotocol.Common.GameState oldGameState_;
    public boolean hasOldGameState() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public ca.site3.ssf.guiprotocol.Common.GameState getOldGameState() {
      return oldGameState_;
    }
    
    // optional .guiprotocol.GameState newGameState = 4;
    public static final int NEWGAMESTATE_FIELD_NUMBER = 4;
    private ca.site3.ssf.guiprotocol.Common.GameState newGameState_;
    public boolean hasNewGameState() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public ca.site3.ssf.guiprotocol.Common.GameState getNewGameState() {
      return newGameState_;
    }
    
    // optional .guiprotocol.GameEvent.MatchResult matchResult = 5;
    public static final int MATCHRESULT_FIELD_NUMBER = 5;
    private ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult matchResult_;
    public boolean hasMatchResult() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult getMatchResult() {
      return matchResult_;
    }
    
    // optional .guiprotocol.GameEvent.Player player = 6;
    public static final int PLAYER_FIELD_NUMBER = 6;
    private ca.site3.ssf.guiprotocol.Event.GameEvent.Player player_;
    public boolean hasPlayer() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.Player getPlayer() {
      return player_;
    }
    
    // optional .guiprotocol.GameEvent.AttackType attackType = 7;
    public static final int ATTACKTYPE_FIELD_NUMBER = 7;
    private ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType attackType_;
    public boolean hasAttackType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType getAttackType() {
      return attackType_;
    }
    
    // optional float oldHealth = 9;
    public static final int OLDHEALTH_FIELD_NUMBER = 9;
    private float oldHealth_;
    public boolean hasOldHealth() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public float getOldHealth() {
      return oldHealth_;
    }
    
    // optional float newHealth = 10;
    public static final int NEWHEALTH_FIELD_NUMBER = 10;
    private float newHealth_;
    public boolean hasNewHealth() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public float getNewHealth() {
      return newHealth_;
    }
    
    // optional int32 roundNumber = 11;
    public static final int ROUNDNUMBER_FIELD_NUMBER = 11;
    private int roundNumber_;
    public boolean hasRoundNumber() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public int getRoundNumber() {
      return roundNumber_;
    }
    
    // optional .guiprotocol.GameEvent.RoundBeginCountdownTime roundBeginTimer = 12;
    public static final int ROUNDBEGINTIMER_FIELD_NUMBER = 12;
    private ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime roundBeginTimer_;
    public boolean hasRoundBeginTimer() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime getRoundBeginTimer() {
      return roundBeginTimer_;
    }
    
    // optional .guiprotocol.GameEvent.RoundResult roundResult = 13;
    public static final int ROUNDRESULT_FIELD_NUMBER = 13;
    private ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult roundResult_;
    public boolean hasRoundResult() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult getRoundResult() {
      return roundResult_;
    }
    
    // optional bool timedOut = 14;
    public static final int TIMEDOUT_FIELD_NUMBER = 14;
    private boolean timedOut_;
    public boolean hasTimedOut() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    public boolean getTimedOut() {
      return timedOut_;
    }
    
    // optional int32 timeInSecs = 15;
    public static final int TIMEINSECS_FIELD_NUMBER = 15;
    private int timeInSecs_;
    public boolean hasTimeInSecs() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    public int getTimeInSecs() {
      return timeInSecs_;
    }
    
    // optional .guiprotocol.GameState gameState = 16;
    public static final int GAMESTATE_FIELD_NUMBER = 16;
    private ca.site3.ssf.guiprotocol.Common.GameState gameState_;
    public boolean hasGameState() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    public ca.site3.ssf.guiprotocol.Common.GameState getGameState() {
      return gameState_;
    }
    
    // repeated .guiprotocol.GameEvent.RoundResult roundResults = 17;
    public static final int ROUNDRESULTS_FIELD_NUMBER = 17;
    private java.util.List<ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult> roundResults_;
    public java.util.List<ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult> getRoundResultsList() {
      return roundResults_;
    }
    public int getRoundResultsCount() {
      return roundResults_.size();
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult getRoundResults(int index) {
      return roundResults_.get(index);
    }
    
    // optional float player1Health = 18;
    public static final int PLAYER1HEALTH_FIELD_NUMBER = 18;
    private float player1Health_;
    public boolean hasPlayer1Health() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    public float getPlayer1Health() {
      return player1Health_;
    }
    
    // optional float player2Health = 19;
    public static final int PLAYER2HEALTH_FIELD_NUMBER = 19;
    private float player2Health_;
    public boolean hasPlayer2Health() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    public float getPlayer2Health() {
      return player2Health_;
    }
    
    // optional int32 roundInPlayTimer = 20;
    public static final int ROUNDINPLAYTIMER_FIELD_NUMBER = 20;
    private int roundInPlayTimer_;
    public boolean hasRoundInPlayTimer() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    public int getRoundInPlayTimer() {
      return roundInPlayTimer_;
    }
    
    // optional .guiprotocol.GameEvent.RingmasterActionType ringmasterActionType = 21;
    public static final int RINGMASTERACTIONTYPE_FIELD_NUMBER = 21;
    private ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType ringmasterActionType_;
    public boolean hasRingmasterActionType() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    public ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType getRingmasterActionType() {
      return ringmasterActionType_;
    }
    
    private void initFields() {
      type_ = ca.site3.ssf.guiprotocol.Event.GameEvent.EventType.GAME_INFO_REFRESH;
      emitter_ = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.getDefaultInstance();
      oldGameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
      newGameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
      matchResult_ = ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult.PLAYER_1_MATCH_WIN;
      player_ = ca.site3.ssf.guiprotocol.Event.GameEvent.Player.RINGMASTER;
      attackType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType.CUSTOM_UNDEFINED;
      oldHealth_ = 0F;
      newHealth_ = 0F;
      roundNumber_ = 0;
      roundBeginTimer_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime.THREE;
      roundResult_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult.ROUND_TIE;
      timedOut_ = false;
      timeInSecs_ = 0;
      gameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
      roundResults_ = java.util.Collections.emptyList();
      player1Health_ = 0F;
      player2Health_ = 0F;
      roundInPlayTimer_ = 0;
      ringmasterActionType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType.LEFT_HALF_RING_ACTION;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasEmitter()) {
        if (!getEmitter().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, emitter_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, oldGameState_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, newGameState_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, matchResult_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, player_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, attackType_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(9, oldHealth_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(10, newHealth_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(11, roundNumber_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(12, roundBeginTimer_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(13, roundResult_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(14, timedOut_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(15, timeInSecs_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeEnum(16, gameState_.getNumber());
      }
      for (int i = 0; i < roundResults_.size(); i++) {
        output.writeEnum(17, roundResults_.get(i).getNumber());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(18, player1Health_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(19, player2Health_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(20, roundInPlayTimer_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeEnum(21, ringmasterActionType_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, emitter_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, oldGameState_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, newGameState_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, matchResult_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, player_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, attackType_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, oldHealth_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, newHealth_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, roundNumber_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, roundBeginTimer_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, roundResult_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, timedOut_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, timeInSecs_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, gameState_.getNumber());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundResults_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(roundResults_.get(i).getNumber());
        }
        size += dataSize;
        size += 2 * roundResults_.size();
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, player1Health_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, player2Health_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, roundInPlayTimer_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(21, ringmasterActionType_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static ca.site3.ssf.guiprotocol.Event.GameEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ca.site3.ssf.guiprotocol.Event.GameEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ca.site3.ssf.guiprotocol.Event.GameEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ca.site3.ssf.guiprotocol.Event.internal_static_guiprotocol_GameEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ca.site3.ssf.guiprotocol.Event.internal_static_guiprotocol_GameEvent_fieldAccessorTable;
      }
      
      // Construct using ca.site3.ssf.guiprotocol.Event.GameEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEmitterFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        type_ = ca.site3.ssf.guiprotocol.Event.GameEvent.EventType.GAME_INFO_REFRESH;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (emitterBuilder_ == null) {
          emitter_ = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.getDefaultInstance();
        } else {
          emitterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        oldGameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
        bitField0_ = (bitField0_ & ~0x00000004);
        newGameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
        bitField0_ = (bitField0_ & ~0x00000008);
        matchResult_ = ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult.PLAYER_1_MATCH_WIN;
        bitField0_ = (bitField0_ & ~0x00000010);
        player_ = ca.site3.ssf.guiprotocol.Event.GameEvent.Player.RINGMASTER;
        bitField0_ = (bitField0_ & ~0x00000020);
        attackType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType.CUSTOM_UNDEFINED;
        bitField0_ = (bitField0_ & ~0x00000040);
        oldHealth_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        newHealth_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        roundNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        roundBeginTimer_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime.THREE;
        bitField0_ = (bitField0_ & ~0x00000400);
        roundResult_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult.ROUND_TIE;
        bitField0_ = (bitField0_ & ~0x00000800);
        timedOut_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        timeInSecs_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        gameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
        bitField0_ = (bitField0_ & ~0x00004000);
        roundResults_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        player1Health_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        player2Health_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        roundInPlayTimer_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        ringmasterActionType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType.LEFT_HALF_RING_ACTION;
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDescriptor();
      }
      
      public ca.site3.ssf.guiprotocol.Event.GameEvent getDefaultInstanceForType() {
        return ca.site3.ssf.guiprotocol.Event.GameEvent.getDefaultInstance();
      }
      
      public ca.site3.ssf.guiprotocol.Event.GameEvent build() {
        ca.site3.ssf.guiprotocol.Event.GameEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private ca.site3.ssf.guiprotocol.Event.GameEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        ca.site3.ssf.guiprotocol.Event.GameEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public ca.site3.ssf.guiprotocol.Event.GameEvent buildPartial() {
        ca.site3.ssf.guiprotocol.Event.GameEvent result = new ca.site3.ssf.guiprotocol.Event.GameEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (emitterBuilder_ == null) {
          result.emitter_ = emitter_;
        } else {
          result.emitter_ = emitterBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.oldGameState_ = oldGameState_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.newGameState_ = newGameState_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.matchResult_ = matchResult_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.player_ = player_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.attackType_ = attackType_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.oldHealth_ = oldHealth_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.newHealth_ = newHealth_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.roundNumber_ = roundNumber_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.roundBeginTimer_ = roundBeginTimer_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.roundResult_ = roundResult_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.timedOut_ = timedOut_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.timeInSecs_ = timeInSecs_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.gameState_ = gameState_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          roundResults_ = java.util.Collections.unmodifiableList(roundResults_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.roundResults_ = roundResults_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.player1Health_ = player1Health_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.player2Health_ = player2Health_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.roundInPlayTimer_ = roundInPlayTimer_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.ringmasterActionType_ = ringmasterActionType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ca.site3.ssf.guiprotocol.Event.GameEvent) {
          return mergeFrom((ca.site3.ssf.guiprotocol.Event.GameEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(ca.site3.ssf.guiprotocol.Event.GameEvent other) {
        if (other == ca.site3.ssf.guiprotocol.Event.GameEvent.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasEmitter()) {
          mergeEmitter(other.getEmitter());
        }
        if (other.hasOldGameState()) {
          setOldGameState(other.getOldGameState());
        }
        if (other.hasNewGameState()) {
          setNewGameState(other.getNewGameState());
        }
        if (other.hasMatchResult()) {
          setMatchResult(other.getMatchResult());
        }
        if (other.hasPlayer()) {
          setPlayer(other.getPlayer());
        }
        if (other.hasAttackType()) {
          setAttackType(other.getAttackType());
        }
        if (other.hasOldHealth()) {
          setOldHealth(other.getOldHealth());
        }
        if (other.hasNewHealth()) {
          setNewHealth(other.getNewHealth());
        }
        if (other.hasRoundNumber()) {
          setRoundNumber(other.getRoundNumber());
        }
        if (other.hasRoundBeginTimer()) {
          setRoundBeginTimer(other.getRoundBeginTimer());
        }
        if (other.hasRoundResult()) {
          setRoundResult(other.getRoundResult());
        }
        if (other.hasTimedOut()) {
          setTimedOut(other.getTimedOut());
        }
        if (other.hasTimeInSecs()) {
          setTimeInSecs(other.getTimeInSecs());
        }
        if (other.hasGameState()) {
          setGameState(other.getGameState());
        }
        if (!other.roundResults_.isEmpty()) {
          if (roundResults_.isEmpty()) {
            roundResults_ = other.roundResults_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureRoundResultsIsMutable();
            roundResults_.addAll(other.roundResults_);
          }
          onChanged();
        }
        if (other.hasPlayer1Health()) {
          setPlayer1Health(other.getPlayer1Health());
        }
        if (other.hasPlayer2Health()) {
          setPlayer2Health(other.getPlayer2Health());
        }
        if (other.hasRoundInPlayTimer()) {
          setRoundInPlayTimer(other.getRoundInPlayTimer());
        }
        if (other.hasRingmasterActionType()) {
          setRingmasterActionType(other.getRingmasterActionType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (hasEmitter()) {
          if (!getEmitter().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Event.GameEvent.EventType value = ca.site3.ssf.guiprotocol.Event.GameEvent.EventType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.Builder subBuilder = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.newBuilder();
              if (hasEmitter()) {
                subBuilder.mergeFrom(getEmitter());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setEmitter(subBuilder.buildPartial());
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Common.GameState value = ca.site3.ssf.guiprotocol.Common.GameState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                oldGameState_ = value;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Common.GameState value = ca.site3.ssf.guiprotocol.Common.GameState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                newGameState_ = value;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult value = ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                matchResult_ = value;
              }
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Event.GameEvent.Player value = ca.site3.ssf.guiprotocol.Event.GameEvent.Player.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                player_ = value;
              }
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType value = ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                attackType_ = value;
              }
              break;
            }
            case 77: {
              bitField0_ |= 0x00000080;
              oldHealth_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000100;
              newHealth_ = input.readFloat();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              roundNumber_ = input.readInt32();
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime value = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                roundBeginTimer_ = value;
              }
              break;
            }
            case 104: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult value = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(13, rawValue);
              } else {
                bitField0_ |= 0x00000800;
                roundResult_ = value;
              }
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              timedOut_ = input.readBool();
              break;
            }
            case 120: {
              bitField0_ |= 0x00002000;
              timeInSecs_ = input.readInt32();
              break;
            }
            case 128: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Common.GameState value = ca.site3.ssf.guiprotocol.Common.GameState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(16, rawValue);
              } else {
                bitField0_ |= 0x00004000;
                gameState_ = value;
              }
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult value = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                addRoundResults(value);
              }
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult value = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(17, rawValue);
                } else {
                  addRoundResults(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
            case 149: {
              bitField0_ |= 0x00010000;
              player1Health_ = input.readFloat();
              break;
            }
            case 157: {
              bitField0_ |= 0x00020000;
              player2Health_ = input.readFloat();
              break;
            }
            case 160: {
              bitField0_ |= 0x00040000;
              roundInPlayTimer_ = input.readInt32();
              break;
            }
            case 168: {
              int rawValue = input.readEnum();
              ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType value = ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(21, rawValue);
              } else {
                bitField0_ |= 0x00080000;
                ringmasterActionType_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .guiprotocol.GameEvent.EventType type = 1;
      private ca.site3.ssf.guiprotocol.Event.GameEvent.EventType type_ = ca.site3.ssf.guiprotocol.Event.GameEvent.EventType.GAME_INFO_REFRESH;
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.EventType getType() {
        return type_;
      }
      public Builder setType(ca.site3.ssf.guiprotocol.Event.GameEvent.EventType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = ca.site3.ssf.guiprotocol.Event.GameEvent.EventType.GAME_INFO_REFRESH;
        onChanged();
        return this;
      }
      
      // optional .guiprotocol.GameEvent.FireEmitter emitter = 2;
      private ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter emitter_ = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter, ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.Builder, ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterOrBuilder> emitterBuilder_;
      public boolean hasEmitter() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter getEmitter() {
        if (emitterBuilder_ == null) {
          return emitter_;
        } else {
          return emitterBuilder_.getMessage();
        }
      }
      public Builder setEmitter(ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter value) {
        if (emitterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          emitter_ = value;
          onChanged();
        } else {
          emitterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setEmitter(
          ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.Builder builderForValue) {
        if (emitterBuilder_ == null) {
          emitter_ = builderForValue.build();
          onChanged();
        } else {
          emitterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeEmitter(ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter value) {
        if (emitterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              emitter_ != ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.getDefaultInstance()) {
            emitter_ =
              ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.newBuilder(emitter_).mergeFrom(value).buildPartial();
          } else {
            emitter_ = value;
          }
          onChanged();
        } else {
          emitterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearEmitter() {
        if (emitterBuilder_ == null) {
          emitter_ = ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.getDefaultInstance();
          onChanged();
        } else {
          emitterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.Builder getEmitterBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getEmitterFieldBuilder().getBuilder();
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterOrBuilder getEmitterOrBuilder() {
        if (emitterBuilder_ != null) {
          return emitterBuilder_.getMessageOrBuilder();
        } else {
          return emitter_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter, ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.Builder, ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterOrBuilder> 
          getEmitterFieldBuilder() {
        if (emitterBuilder_ == null) {
          emitterBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter, ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.Builder, ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitterOrBuilder>(
                  emitter_,
                  getParentForChildren(),
                  isClean());
          emitter_ = null;
        }
        return emitterBuilder_;
      }
      
      // optional .guiprotocol.GameState oldGameState = 3;
      private ca.site3.ssf.guiprotocol.Common.GameState oldGameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
      public boolean hasOldGameState() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public ca.site3.ssf.guiprotocol.Common.GameState getOldGameState() {
        return oldGameState_;
      }
      public Builder setOldGameState(ca.site3.ssf.guiprotocol.Common.GameState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        oldGameState_ = value;
        onChanged();
        return this;
      }
      public Builder clearOldGameState() {
        bitField0_ = (bitField0_ & ~0x00000004);
        oldGameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
        onChanged();
        return this;
      }
      
      // optional .guiprotocol.GameState newGameState = 4;
      private ca.site3.ssf.guiprotocol.Common.GameState newGameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
      public boolean hasNewGameState() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public ca.site3.ssf.guiprotocol.Common.GameState getNewGameState() {
        return newGameState_;
      }
      public Builder setNewGameState(ca.site3.ssf.guiprotocol.Common.GameState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        newGameState_ = value;
        onChanged();
        return this;
      }
      public Builder clearNewGameState() {
        bitField0_ = (bitField0_ & ~0x00000008);
        newGameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
        onChanged();
        return this;
      }
      
      // optional .guiprotocol.GameEvent.MatchResult matchResult = 5;
      private ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult matchResult_ = ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult.PLAYER_1_MATCH_WIN;
      public boolean hasMatchResult() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult getMatchResult() {
        return matchResult_;
      }
      public Builder setMatchResult(ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        matchResult_ = value;
        onChanged();
        return this;
      }
      public Builder clearMatchResult() {
        bitField0_ = (bitField0_ & ~0x00000010);
        matchResult_ = ca.site3.ssf.guiprotocol.Event.GameEvent.MatchResult.PLAYER_1_MATCH_WIN;
        onChanged();
        return this;
      }
      
      // optional .guiprotocol.GameEvent.Player player = 6;
      private ca.site3.ssf.guiprotocol.Event.GameEvent.Player player_ = ca.site3.ssf.guiprotocol.Event.GameEvent.Player.RINGMASTER;
      public boolean hasPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.Player getPlayer() {
        return player_;
      }
      public Builder setPlayer(ca.site3.ssf.guiprotocol.Event.GameEvent.Player value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        player_ = value;
        onChanged();
        return this;
      }
      public Builder clearPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        player_ = ca.site3.ssf.guiprotocol.Event.GameEvent.Player.RINGMASTER;
        onChanged();
        return this;
      }
      
      // optional .guiprotocol.GameEvent.AttackType attackType = 7;
      private ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType attackType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType.CUSTOM_UNDEFINED;
      public boolean hasAttackType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType getAttackType() {
        return attackType_;
      }
      public Builder setAttackType(ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        attackType_ = value;
        onChanged();
        return this;
      }
      public Builder clearAttackType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        attackType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.AttackType.CUSTOM_UNDEFINED;
        onChanged();
        return this;
      }
      
      // optional float oldHealth = 9;
      private float oldHealth_ ;
      public boolean hasOldHealth() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public float getOldHealth() {
        return oldHealth_;
      }
      public Builder setOldHealth(float value) {
        bitField0_ |= 0x00000080;
        oldHealth_ = value;
        onChanged();
        return this;
      }
      public Builder clearOldHealth() {
        bitField0_ = (bitField0_ & ~0x00000080);
        oldHealth_ = 0F;
        onChanged();
        return this;
      }
      
      // optional float newHealth = 10;
      private float newHealth_ ;
      public boolean hasNewHealth() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public float getNewHealth() {
        return newHealth_;
      }
      public Builder setNewHealth(float value) {
        bitField0_ |= 0x00000100;
        newHealth_ = value;
        onChanged();
        return this;
      }
      public Builder clearNewHealth() {
        bitField0_ = (bitField0_ & ~0x00000100);
        newHealth_ = 0F;
        onChanged();
        return this;
      }
      
      // optional int32 roundNumber = 11;
      private int roundNumber_ ;
      public boolean hasRoundNumber() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public int getRoundNumber() {
        return roundNumber_;
      }
      public Builder setRoundNumber(int value) {
        bitField0_ |= 0x00000200;
        roundNumber_ = value;
        onChanged();
        return this;
      }
      public Builder clearRoundNumber() {
        bitField0_ = (bitField0_ & ~0x00000200);
        roundNumber_ = 0;
        onChanged();
        return this;
      }
      
      // optional .guiprotocol.GameEvent.RoundBeginCountdownTime roundBeginTimer = 12;
      private ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime roundBeginTimer_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime.THREE;
      public boolean hasRoundBeginTimer() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime getRoundBeginTimer() {
        return roundBeginTimer_;
      }
      public Builder setRoundBeginTimer(ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        roundBeginTimer_ = value;
        onChanged();
        return this;
      }
      public Builder clearRoundBeginTimer() {
        bitField0_ = (bitField0_ & ~0x00000400);
        roundBeginTimer_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundBeginCountdownTime.THREE;
        onChanged();
        return this;
      }
      
      // optional .guiprotocol.GameEvent.RoundResult roundResult = 13;
      private ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult roundResult_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult.ROUND_TIE;
      public boolean hasRoundResult() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult getRoundResult() {
        return roundResult_;
      }
      public Builder setRoundResult(ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000800;
        roundResult_ = value;
        onChanged();
        return this;
      }
      public Builder clearRoundResult() {
        bitField0_ = (bitField0_ & ~0x00000800);
        roundResult_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult.ROUND_TIE;
        onChanged();
        return this;
      }
      
      // optional bool timedOut = 14;
      private boolean timedOut_ ;
      public boolean hasTimedOut() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      public boolean getTimedOut() {
        return timedOut_;
      }
      public Builder setTimedOut(boolean value) {
        bitField0_ |= 0x00001000;
        timedOut_ = value;
        onChanged();
        return this;
      }
      public Builder clearTimedOut() {
        bitField0_ = (bitField0_ & ~0x00001000);
        timedOut_ = false;
        onChanged();
        return this;
      }
      
      // optional int32 timeInSecs = 15;
      private int timeInSecs_ ;
      public boolean hasTimeInSecs() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      public int getTimeInSecs() {
        return timeInSecs_;
      }
      public Builder setTimeInSecs(int value) {
        bitField0_ |= 0x00002000;
        timeInSecs_ = value;
        onChanged();
        return this;
      }
      public Builder clearTimeInSecs() {
        bitField0_ = (bitField0_ & ~0x00002000);
        timeInSecs_ = 0;
        onChanged();
        return this;
      }
      
      // optional .guiprotocol.GameState gameState = 16;
      private ca.site3.ssf.guiprotocol.Common.GameState gameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
      public boolean hasGameState() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      public ca.site3.ssf.guiprotocol.Common.GameState getGameState() {
        return gameState_;
      }
      public Builder setGameState(ca.site3.ssf.guiprotocol.Common.GameState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00004000;
        gameState_ = value;
        onChanged();
        return this;
      }
      public Builder clearGameState() {
        bitField0_ = (bitField0_ & ~0x00004000);
        gameState_ = ca.site3.ssf.guiprotocol.Common.GameState.NO_STATE;
        onChanged();
        return this;
      }
      
      // repeated .guiprotocol.GameEvent.RoundResult roundResults = 17;
      private java.util.List<ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult> roundResults_ =
        java.util.Collections.emptyList();
      private void ensureRoundResultsIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          roundResults_ = new java.util.ArrayList<ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult>(roundResults_);
          bitField0_ |= 0x00008000;
        }
      }
      public java.util.List<ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult> getRoundResultsList() {
        return java.util.Collections.unmodifiableList(roundResults_);
      }
      public int getRoundResultsCount() {
        return roundResults_.size();
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult getRoundResults(int index) {
        return roundResults_.get(index);
      }
      public Builder setRoundResults(
          int index, ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRoundResultsIsMutable();
        roundResults_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addRoundResults(ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRoundResultsIsMutable();
        roundResults_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllRoundResults(
          java.lang.Iterable<? extends ca.site3.ssf.guiprotocol.Event.GameEvent.RoundResult> values) {
        ensureRoundResultsIsMutable();
        super.addAll(values, roundResults_);
        onChanged();
        return this;
      }
      public Builder clearRoundResults() {
        roundResults_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }
      
      // optional float player1Health = 18;
      private float player1Health_ ;
      public boolean hasPlayer1Health() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      public float getPlayer1Health() {
        return player1Health_;
      }
      public Builder setPlayer1Health(float value) {
        bitField0_ |= 0x00010000;
        player1Health_ = value;
        onChanged();
        return this;
      }
      public Builder clearPlayer1Health() {
        bitField0_ = (bitField0_ & ~0x00010000);
        player1Health_ = 0F;
        onChanged();
        return this;
      }
      
      // optional float player2Health = 19;
      private float player2Health_ ;
      public boolean hasPlayer2Health() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      public float getPlayer2Health() {
        return player2Health_;
      }
      public Builder setPlayer2Health(float value) {
        bitField0_ |= 0x00020000;
        player2Health_ = value;
        onChanged();
        return this;
      }
      public Builder clearPlayer2Health() {
        bitField0_ = (bitField0_ & ~0x00020000);
        player2Health_ = 0F;
        onChanged();
        return this;
      }
      
      // optional int32 roundInPlayTimer = 20;
      private int roundInPlayTimer_ ;
      public boolean hasRoundInPlayTimer() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      public int getRoundInPlayTimer() {
        return roundInPlayTimer_;
      }
      public Builder setRoundInPlayTimer(int value) {
        bitField0_ |= 0x00040000;
        roundInPlayTimer_ = value;
        onChanged();
        return this;
      }
      public Builder clearRoundInPlayTimer() {
        bitField0_ = (bitField0_ & ~0x00040000);
        roundInPlayTimer_ = 0;
        onChanged();
        return this;
      }
      
      // optional .guiprotocol.GameEvent.RingmasterActionType ringmasterActionType = 21;
      private ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType ringmasterActionType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType.LEFT_HALF_RING_ACTION;
      public boolean hasRingmasterActionType() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      public ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType getRingmasterActionType() {
        return ringmasterActionType_;
      }
      public Builder setRingmasterActionType(ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00080000;
        ringmasterActionType_ = value;
        onChanged();
        return this;
      }
      public Builder clearRingmasterActionType() {
        bitField0_ = (bitField0_ & ~0x00080000);
        ringmasterActionType_ = ca.site3.ssf.guiprotocol.Event.GameEvent.RingmasterActionType.LEFT_HALF_RING_ACTION;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:guiprotocol.GameEvent)
    }
    
    static {
      defaultInstance = new GameEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:guiprotocol.GameEvent)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_guiprotocol_GameEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_guiprotocol_GameEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_guiprotocol_GameEvent_FireEmitter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_guiprotocol_GameEvent_FireEmitter_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013event.proto\022\013guiprotocol\032\014common.proto" +
      "\"\242\024\n\tGameEvent\022.\n\004type\030\001 \002(\0162 .guiprotoc" +
      "ol.GameEvent.EventType\0223\n\007emitter\030\002 \001(\0132" +
      "\".guiprotocol.GameEvent.FireEmitter\022,\n\014o" +
      "ldGameState\030\003 \001(\0162\026.guiprotocol.GameStat" +
      "e\022,\n\014newGameState\030\004 \001(\0162\026.guiprotocol.Ga" +
      "meState\0227\n\013matchResult\030\005 \001(\0162\".guiprotoc" +
      "ol.GameEvent.MatchResult\022-\n\006player\030\006 \001(\016" +
      "2\035.guiprotocol.GameEvent.Player\0225\n\nattac" +
      "kType\030\007 \001(\0162!.guiprotocol.GameEvent.Atta",
      "ckType\022\021\n\toldHealth\030\t \001(\002\022\021\n\tnewHealth\030\n" +
      " \001(\002\022\023\n\013roundNumber\030\013 \001(\005\022G\n\017roundBeginT" +
      "imer\030\014 \001(\0162..guiprotocol.GameEvent.Round" +
      "BeginCountdownTime\0227\n\013roundResult\030\r \001(\0162" +
      "\".guiprotocol.GameEvent.RoundResult\022\020\n\010t" +
      "imedOut\030\016 \001(\010\022\022\n\ntimeInSecs\030\017 \001(\005\022)\n\tgam" +
      "eState\030\020 \001(\0162\026.guiprotocol.GameState\0228\n\014" +
      "roundResults\030\021 \003(\0162\".guiprotocol.GameEve" +
      "nt.RoundResult\022\025\n\rplayer1Health\030\022 \001(\002\022\025\n" +
      "\rplayer2Health\030\023 \001(\002\022\030\n\020roundInPlayTimer",
      "\030\024 \001(\005\022I\n\024ringmasterActionType\030\025 \001(\0162+.g" +
      "uiprotocol.GameEvent.RingmasterActionTyp" +
      "e\032\261\001\n\013FireEmitter\022\024\n\014emitterIndex\030\001 \002(\005\022" +
      ";\n\013emitterType\030\002 \002(\0162&.guiprotocol.GameE" +
      "vent.FireEmitterType\022\033\n\023intensityRingmas" +
      "ter\030\003 \002(\002\022\030\n\020intensityPlayer1\030\004 \002(\002\022\030\n\020i" +
      "ntensityPlayer2\030\005 \002(\002\"\261\002\n\tEventType\022\025\n\021G" +
      "AME_INFO_REFRESH\020\000\022\030\n\024FIRE_EMITTER_CHANG" +
      "ED\020\001\022\026\n\022GAME_STATE_CHANGED\020\002\022\031\n\025PLAYER_H" +
      "EALTH_CHANGED\020\003\022\034\n\030ROUND_PLAY_TIMER_CHAN",
      "GED\020\004\022\035\n\031ROUND_BEGIN_TIMER_CHANGED\020\005\022\017\n\013" +
      "ROUND_ENDED\020\006\022\017\n\013MATCH_ENDED\020\007\022\030\n\024PLAYER" +
      "_ATTACK_ACTION\020\010\022\027\n\023PLAYER_BLOCK_ACTION\020" +
      "\t\022\025\n\021RINGMASTER_ACTION\020\n\022\027\n\023SYSTEM_INFO_" +
      "REFRESH\020\013\"(\n\006Player\022\016\n\nRINGMASTER\020\000\022\006\n\002P" +
      "1\020\001\022\006\n\002P2\020\002\"L\n\013RoundResult\022\r\n\tROUND_TIE\020" +
      "\000\022\026\n\022PLAYER_1_ROUND_WIN\020\001\022\026\n\022PLAYER_2_RO" +
      "UND_WIN\020\002\"=\n\013MatchResult\022\026\n\022PLAYER_1_MAT" +
      "CH_WIN\020\000\022\026\n\022PLAYER_2_MATCH_WIN\020\001\"@\n\017Fire" +
      "EmitterType\022\r\n\tLEFT_RAIL\020\000\022\016\n\nRIGHT_RAIL",
      "\020\001\022\016\n\nOUTER_RING\020\002\"I\n\020FlameEmitterType\022\020" +
      "\n\014ATTACK_FLAME\020\000\022\017\n\013BLOCK_FLAME\020\001\022\022\n\016NON" +
      "_GAME_FLAME\020\002\"\203\005\n\nAttackType\022\024\n\020CUSTOM_U" +
      "NDEFINED\020\000\022\014\n\010LEFT_JAB\020\001\022\r\n\tRIGHT_JAB\020\002\022" +
      "\r\n\tLEFT_HOOK\020\003\022\016\n\nRIGHT_HOOK\020\004\022\021\n\rLEFT_U" +
      "PPERCUT\020\005\022\022\n\016RIGHT_UPPERCUT\020\006\022\r\n\tLEFT_CH" +
      "OP\020\007\022\016\n\nRIGHT_CHOP\020\010\022\014\n\010HADOUKEN\020\t\022\016\n\nSO" +
      "NIC_BOOM\020\n\022\031\n\025LEFT_SHORYUKEN_ATTACK\020\013\022\032\n" +
      "\026RIGHT_SHORYUKEN_ATTACK\020\014\022\030\n\024DOUBLE_LARI" +
      "AT_ATTACK\020\r\022\033\n\027QUADRUPLE_LARIAT_ATTACK\020\016",
      "\022\030\n\024SUMO_HEADBUTT_ATTACK\020\017\022%\n!LEFT_ONE_H" +
      "UNDRED_HAND_SLAP_ATTACK\020\020\022&\n\"RIGHT_ONE_H" +
      "UNDRED_HAND_SLAP_ATTACK\020\021\022+\n\'TWO_HANDED_" +
      "ONE_HUNDRED_HAND_SLAP_ATTACK\020\022\022\031\n\025PSYCHO" +
      "_CRUSHER_ATTACK\020\023\022\017\n\013YMCA_ATTACK\020\024\022\023\n\017NY" +
      "AN_CAT_ATTACK\020\025\022\024\n\020DISCO_STU_ATTACK\020\026\022\027\n" +
      "\023ARM_WINDMILL_ATTACK\020\027\022\022\n\016SUCK_IT_ATTACK" +
      "\020\030\022\032\n\026LEFT_VAFANAPOLI_ATTACK\020\031\022\033\n\027RIGHT_" +
      "VAFANAPOLI_ATTACK\020\032\"\344\001\n\024RingmasterAction" +
      "Type\022\031\n\025LEFT_HALF_RING_ACTION\020\000\022\032\n\026RIGHT",
      "_HALF_RING_ACTION\020\001\022\023\n\017LEFT_JAB_ACTION\020\002" +
      "\022\024\n\020RIGHT_JAB_ACTION\020\003\022\023\n\017ERUPTION_ACTIO" +
      "N\020\004\022\026\n\022LEFT_CIRCLE_ACTION\020\005\022\027\n\023RIGHT_CIR" +
      "CLE_ACTION\020\006\022\023\n\017HADOUKEN_ACTION\020\007\022\017\n\013DRU" +
      "M_ACTION\020\010\"A\n\027RoundBeginCountdownTime\022\t\n" +
      "\005THREE\020\000\022\007\n\003TWO\020\001\022\007\n\003ONE\020\002\022\t\n\005FIGHT\020\003B\032\n" +
      "\030ca.site3.ssf.guiprotocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_guiprotocol_GameEvent_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_guiprotocol_GameEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_guiprotocol_GameEvent_descriptor,
              new java.lang.String[] { "Type", "Emitter", "OldGameState", "NewGameState", "MatchResult", "Player", "AttackType", "OldHealth", "NewHealth", "RoundNumber", "RoundBeginTimer", "RoundResult", "TimedOut", "TimeInSecs", "GameState", "RoundResults", "Player1Health", "Player2Health", "RoundInPlayTimer", "RingmasterActionType", },
              ca.site3.ssf.guiprotocol.Event.GameEvent.class,
              ca.site3.ssf.guiprotocol.Event.GameEvent.Builder.class);
          internal_static_guiprotocol_GameEvent_FireEmitter_descriptor =
            internal_static_guiprotocol_GameEvent_descriptor.getNestedTypes().get(0);
          internal_static_guiprotocol_GameEvent_FireEmitter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_guiprotocol_GameEvent_FireEmitter_descriptor,
              new java.lang.String[] { "EmitterIndex", "EmitterType", "IntensityRingmaster", "IntensityPlayer1", "IntensityPlayer2", },
              ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.class,
              ca.site3.ssf.guiprotocol.Event.GameEvent.FireEmitter.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          ca.site3.ssf.guiprotocol.Common.getDescriptor(),
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
