import "common.proto";

package guiprotocol;

option java_package = "ca.site3.ssf.guiprotocol";


message GameEvent {

  // corresponds to IGameModelEvent classes
  enum EventType {
    GAME_INFO_REFRESH            = 0;
    FIRE_EMITTER_CHANGED         = 1;
    GAME_STATE_CHANGED           = 2;
    PLAYER_HEALTH_CHANGED        = 3;
    ROUND_PLAY_TIMER_CHANGED     = 4;
    ROUND_BEGIN_TIMER_CHANGED    = 5;
    ROUND_ENDED                  = 6;
    MATCH_ENDED                  = 7;
    PLAYER_ATTACK_ACTION         = 8;
    PLAYER_BLOCK_ACTION          = 9;
    RINGMASTER_ACTION            = 10;
    SYSTEM_INFO_REFRESH          = 11;
    UNRECOGNIZED_GESTURE         = 12;
    BLOCK_WINDOW                 = 13;
    PLAYER_ACTION_POINTS_CHANGED = 14;
    PLAYER_ATTACK_ACTION_FAILED  = 15;
  }
  
  enum RoundResult {
    ROUND_TIE          = 0;
    PLAYER_1_ROUND_WIN = 1;
    PLAYER_2_ROUND_WIN = 2;
  }
  
  enum MatchResult {
    PLAYER_1_MATCH_WIN = 0;
    PLAYER_2_MATCH_WIN = 1;
  }

  enum FireEmitterType {
    LEFT_RAIL  = 0;
    RIGHT_RAIL = 1;
    OUTER_RING = 2;
  }
  
  enum FlameEmitterType { 
    ATTACK_FLAME   = 0;
    BLOCK_FLAME    = 1;
    NON_GAME_FLAME = 2;
  }
  
  enum AttackType {
    CUSTOM_UNDEFINED = 0;
    
    // Basic Attacks
    LEFT_JAB         = 1;
    RIGHT_JAB        = 2; 
    LEFT_HOOK        = 3;
    RIGHT_HOOK       = 4;
    LEFT_UPPERCUT    = 5;
    RIGHT_UPPERCUT   = 6;
    LEFT_CHOP        = 7;
    RIGHT_CHOP       = 8;
    
    // Special Attacks
    HADOUKEN                                = 9;
    SONIC_BOOM                              = 10;
    LEFT_SHORYUKEN_ATTACK                   = 11;
    RIGHT_SHORYUKEN_ATTACK                  = 12;
    DOUBLE_LARIAT_ATTACK                    = 13;
    QUADRUPLE_LARIAT_ATTACK                 = 14;
    SUMO_HEADBUTT_ATTACK                    = 15;
    LEFT_ONE_HUNDRED_HAND_SLAP_ATTACK       = 16;
    RIGHT_ONE_HUNDRED_HAND_SLAP_ATTACK      = 17;
    TWO_HANDED_ONE_HUNDRED_HAND_SLAP_ATTACK = 18;
    PSYCHO_CRUSHER_ATTACK                   = 19;
    
    // Easter Egg Attacks
    YMCA_ATTACK             = 20;
    NYAN_CAT_ATTACK         = 21;
    DISCO_STU_ATTACK        = 22;
    ARM_WINDMILL_ATTACK     = 23;
    SUCK_IT_ATTACK          = 24;
    LEFT_VAFANAPOLI_ATTACK  = 25;
    RIGHT_VAFANAPOLI_ATTACK = 26;
    
  }
  
  enum RingmasterActionType {
      LEFT_HALF_RING_ACTION  = 0;
      RIGHT_HALF_RING_ACTION = 1;
      LEFT_JAB_ACTION        = 2;
      RIGHT_JAB_ACTION       = 3;
      ERUPTION_ACTION        = 4;
      LEFT_CIRCLE_ACTION     = 5;
      RIGHT_CIRCLE_ACTION    = 6;
      HADOUKEN_ACTION        = 7;
      DRUM_ACTION            = 8;
  }
  
  enum RoundBeginCountdownTime {
    THREE = 0;
    TWO   = 1;
    ONE   = 2;
    FIGHT = 3;
  }
  
  enum AttackFailureReason {
    NOT_ENOUGH_ACTION_POINTS = 0;
  }
  
  // needed to reconstruct a FireEmitter (or at impersonate a FireEmitterChangedEvent)
  message FireEmitter {
     required int32 emitterIndex = 1;
     required FireEmitterType emitterType = 2; // like FireEmitter.Location
     required float intensityRingmaster = 3;
     required float intensityPlayer1 = 4;
     required float intensityPlayer2 = 5;
  }
  
  // status updates from serial boards
  message BoardStatus {
  	required int32 deviceId = 1;
  	required bool responding = 2;
  	required bool armed = 3;
  	required bool flame = 4;
  }
  
  // lets deserializer know which fields to look for
  required EventType type = 1;
  
  // FireEmitterChanged
  optional FireEmitter emitter = 2;
  
  // GameStateChanged
  optional GameState oldGameState = 3;
  optional GameState newGameState = 4;
  
  // MatchEnded
  optional MatchResult matchResult = 5;
  
  // shared between Player{Attack,Block}ActionEvent and PlayerHealthChange
  optional Player player = 6;
  
  // PlayerAttackActionEvent
  optional AttackType attackType = 7;
  
  // PlayerHealthChange
  optional float oldHealth = 9;
  optional float newHealth = 10;
    
  // RoundBeginTimerChangeEvent
  optional int32 roundNumber = 11;
  optional RoundBeginCountdownTime roundBeginTimer = 12;
  
  // RoundEndedEvent
  // share roundNumber
  optional RoundResult roundResult = 13;
  optional bool timedOut = 14;
  
  // RoundPlayTimerChangedEvent
  optional int32 timeInSecs = 15;
  
  
  // GameInfoRefreshEvent
  optional GameState gameState       = 16;    
  repeated RoundResult roundResults  = 17;
  optional float player1Health       = 18;
  optional float player2Health       = 19;
  optional int32 roundInPlayTimer    = 20;
  
  // SystemInfoRefreshEvent -- a list of device IDs that responded to status query
  repeated BoardStatus boardStatus = 21;
  
  
  optional bool player1UnlimitedMovesOn = 22;
  optional bool player2UnlimitedMovesOn = 23;
  
  // NOTE: The GameInfoRefreshEvent also makes use of timedOut, roundBeginTimer, matchResult
  
  // RingmasterActionEvent
  optional RingmasterActionType ringmasterActionType = 24;
  
  // PlayerBlockActionEvent
  // reuse player
  optional bool blockWasEffective = 25;
  
  // BlockWindowEvent
  optional int32 blockWindowID          = 26;
  optional bool blockWindowHasExpired   = 27;
  optional double blockWindowTimeInSecs = 28;
  optional int32 blockingPlayerNumber   = 29;
  
  // PlayerActionPointsChangedEvent
  // reuse player
  optional float oldActionPoints = 30;
  optional float newActionPoints = 31;
  
  // PlayerAttackActionFailedEvent
  // reuse player
  // reuse attackType
  optional AttackFailureReason attackFailureReason = 32;
  
  // Also for GameInfoRefreshEvent:
  optional float player1ActionPoints = 33;
  optional float player2ActionPoints = 34;
}