'''
gesture_recognizer.py

@author: Callum Hay
'''

from idle_gesture_state import IdleGestureState

class GestureRecognizer:
    # High-level attack and defense gesture enumeration values
    NO_GESTURE                  = 0
    LEFT_JAB_ATTACK_GESTURE     = 1
    RIGHT_JAB_ATTACK_GESTURE    = 2
    LEFT_HOOK_ATTACK_GESTURE    = 3 
    RIGHT_HOOK_ATTACK_GESTURE   = 4
    HADOUKEN_ATTACK_GESTURE     = 5
    LEFT_BLOCK_DEFENSE_GESTURE  = 101
    RIGHT_BLOCK_DEFENSE_GESTURE = 102
    
    def __init__(self): 
        
        self._p1GestureState = IdleGestureState(self, 1)
        self._p2GestureState = IdleGestureState(self, 2)
        
        # Keep lists of all actions that have been generated by the gesture
        # statemachine - these will be picked up by the SSFGame and executed 
        self._lastUnconsumedActions = []
    
    # Determine whether there are any newly available
    # actions that have recently been recognized (recent in-so-far as it has
    # not yet been consumed via the PopActions() method).
    def HasNewActionsAvailable(self):
        return len(self._lastUnconsumedActions) == 0
    
    # Pop all of the available actions from the action list - these
    # are actions that have been generated by the gesture state machine
    # since the last call to this function
    # This will return a list of all the actions and then empty
    # this object's list of actions
    def PopActions(self):
        temp = self._lastUnconsumedActions
        self._lastUnconsumedActions = []
        return temp
    
    # Update the gesture recognizer with a new 'frame' of data,
    # any piece of the provided data may be equal to None, in such
    # a case that value is maintained/unchanged within the recognizer
    # from the last time it was set 
    def UpdateWithGestureData(self, p1LGloveData, p1RGloveData,
                                    p2LGloveData, p2RGloveData, dT, timeStamp):
        
        self._p1GestureState.Update(p1LGloveData, p1RGloveData, dT, timeStamp)
        self._p2GestureState.Update(p2LGloveData, p2RGloveData, dT, timeStamp)
        
    def _ChangeP1State(self, newState):
        self._p1GestureState = newState
    def _ChangeP2State(self, newState):
        self._p2GestureState = newState
        
    